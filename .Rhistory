for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
for (i in 2:ncol(Con.df)) {
list[[]] <- Con.df[,i]
}
list <- list()
for (i in 2:ncol(Con.df)) {
list[[]] <- Con.df[,i]
}
list[ <- Con.df[,i]
for (i in 2:ncol(Con.df)) {
list[] <- Con.df[,i]
}
View(list)
View(list)
for (i in 2:ncol(Con.df)) {
list[[i]] <- Con.df[,i]
}
View(list)
list <- list()
for (i in 2:ncol(Con.df)) {
list[[i]] <- Con.df[,i]
}
View(list)
ncol(Con.df)
list <- list()
for (i in 2:(ncol(Con.df)-1)) {
list[[i]] <- Con.df[,i]
}
View(list)
View(list)
View(list)
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
}
View(list)
View(list)
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 45)
}
list[[i]] <- fdiscgammagpd(list[[i]], useq = 45)
list[[i]]
fdiscgammagpd(list[[i]])
fdiscgammagpd(list[[i]], useq = 5)
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 25)
}
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 15)
}
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 5)
}
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 2)
}
View(list)
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
# list[[i]] <- fdiscgammagpd(list[[i]], useq = 2)
}
unique(round(quantile(list[[1]], c(.75,.8,.85,.9))))
round(quantile(list[[1]], c(.75,.8,.85,.9)))
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 1)
}
grid <- min(c(list[[1]])):10000
grid <- min(list[[1]]):10000
grid <- min(list[[1]]):10000
list[[1]]
names(list)
names(list) <- names(df)
names(list)
grid <- min(c(names(list))):10000
dput(names())
dput(names(df))
grid <- min(c(PY_P))):10000
grid <- min(c(PY_P)):10000
set.seed(123)
s1 <- rdiscgammagpd(1000, shape = 3, rate = .15, u = 25, sigma = 15,
xi = .5, shift = 1)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
View(distances)
clusterPlot(distances, method = "ward.D")
plot <- clusterPlot(distances, method = distance)
distance <- "ward.D2"
clonesizeDistribution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
distance = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid"))) {
plot <- clusterPlot(distances, method = distance)
plot
clusterPlot(distances, method = distance)
clusterPlot(distances, method = method, type = "cladogram")
hclust(as.dist(distances), method = method), sub = "", xlab = "")
hclust(as.dist(distances), method = method)
hclust(as.dist(distances), method = "ward.D2")
x <- hclust(as.dist(distances), method = "ward.D2")
View(x)
method = "ward.D2"
x <- hclust(as.dist(distances), method = method)
hclust <- hclust(as.dist(distances), method = method)
ggd1 <- as.ggdend(dend)
install.packages('dendextend')
ggd1 <- dendextend::as.ggdend(dend)
ggd1 <- dendextend::as.ggdend(hclust)
install.packages("ggdendro")
ggdendro::ggdendrogram(hclust)
clonesizeDistribution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
method = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid")) {
cloneCall <- theCall(cloneCall)
data <- dplyr::bind_rows(df)
unique_df <- unique(data[,cloneCall])
Con.df <- data.frame(matrix(NA, length(unique_df), length(df)))
Con.df <- data.frame(unique_df, Con.df, stringsAsFactors = F)
colnames(Con.df)[1] <- "clonotype"
for (i in seq_along(df)) {
data <- df[[i]]
data <- data.frame(table(data[,cloneCall]), stringsAsFactors = F)
colnames(data) <- c(cloneCall, "Freq")
for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 1)
}
names(list) <- names(df)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
hclust <- hclust(as.dist(distances), method = method)
plot <- ggdendro::ggdendrogram(hclust)
if (exportTable == T) {
clonesizeDistribution_output <<- distances
}
}
clonesizeDistribution(combined, call = "gene+nt", method="ward.D2")
clonesizeDistribution(combined, cloneCall = "gene+nt", method="ward.D2")
clonesizeDistribution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
method = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid"),
exportTable = F) {
cloneCall <- theCall(cloneCall)
data <- dplyr::bind_rows(df)
unique_df <- unique(data[,cloneCall])
Con.df <- data.frame(matrix(NA, length(unique_df), length(df)))
Con.df <- data.frame(unique_df, Con.df, stringsAsFactors = F)
colnames(Con.df)[1] <- "clonotype"
for (i in seq_along(df)) {
data <- df[[i]]
data <- data.frame(table(data[,cloneCall]), stringsAsFactors = F)
colnames(data) <- c(cloneCall, "Freq")
for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 1)
}
names(list) <- names(df)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
hclust <- hclust(as.dist(distances), method = method)
plot <- ggdendro::ggdendrogram(hclust)
if (exportTable == T) {
clonesizeDistribution_output <<- distances
}
}
clonesizeDistribution(combined, cloneCall = "gene+nt", method="ward.D2")
clonesizeDistrixbution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
method = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid"),
exportTable = F) {
cloneCall <- theCall(cloneCall)
data <- dplyr::bind_rows(df)
unique_df <- unique(data[,cloneCall])
Con.df <- data.frame(matrix(NA, length(unique_df), length(df)))
Con.df <- data.frame(unique_df, Con.df, stringsAsFactors = F)
colnames(Con.df)[1] <- "clonotype"
for (i in seq_along(df)) {
data <- df[[i]]
data <- data.frame(table(data[,cloneCall]), stringsAsFactors = F)
colnames(data) <- c(cloneCall, "Freq")
for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 1)
}
names(list) <- names(df)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
hclust <- hclust(as.dist(distances), method = method)
plot <- ggdendro::ggdendrogram(hclust)
if (exportTable == T) {
clonesizeDistribution_output <<- distances
}
return(plot)
}
clonesizeDistribution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
method = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid"),
exportTable = F) {
cloneCall <- theCall(cloneCall)
data <- dplyr::bind_rows(df)
unique_df <- unique(data[,cloneCall])
Con.df <- data.frame(matrix(NA, length(unique_df), length(df)))
Con.df <- data.frame(unique_df, Con.df, stringsAsFactors = F)
colnames(Con.df)[1] <- "clonotype"
for (i in seq_along(df)) {
data <- df[[i]]
data <- data.frame(table(data[,cloneCall]), stringsAsFactors = F)
colnames(data) <- c(cloneCall, "Freq")
for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- fdiscgammagpd(list[[i]], useq = 1)
}
names(list) <- names(df)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
hclust <- hclust(as.dist(distances), method = method)
plot <- ggdendro::ggdendrogram(hclust)
if (exportTable == T) {
clonesizeDistribution_output <<- distances
}
return(plot)
}
clonesizeDistribution(combined, cloneCall = "gene+nt", method="ward.D2")
clonesizeDistribution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
method = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid"),
exportTable = F) {
cloneCall <- theCall(cloneCall)
data <- dplyr::bind_rows(df)
unique_df <- unique(data[,cloneCall])
Con.df <- data.frame(matrix(NA, length(unique_df), length(df)))
Con.df <- data.frame(unique_df, Con.df, stringsAsFactors = F)
colnames(Con.df)[1] <- "clonotype"
for (i in seq_along(df)) {
data <- df[[i]]
data <- data.frame(table(data[,cloneCall]), stringsAsFactors = F)
colnames(data) <- c(cloneCall, "Freq")
for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- suppressMessages(fdiscgammagpd(list[[i]], useq = 1))
}
names(list) <- names(df)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
hclust <- hclust(as.dist(distances), method = method)
plot <- ggdendro::ggdendrogram(hclust)
if (exportTable == T) {
clonesizeDistribution_output <<- distances
}
return(plot)
}
clonesizeDistribution(combined, cloneCall = "gene+nt", method="ward.D2")
clonesizeDistribution <- function(df,
cloneCall = c("gene", "nt", "aa", "gene+nt"),
method = c("complete", "ward.D", "ward.D2",
"single", "average", "mcquitty",
"median", "centroid"),
exportTable = F) {
cloneCall <- theCall(cloneCall)
data <- dplyr::bind_rows(df)
unique_df <- unique(data[,cloneCall])
Con.df <- data.frame(matrix(NA, length(unique_df), length(df)))
Con.df <- data.frame(unique_df, Con.df, stringsAsFactors = F)
colnames(Con.df)[1] <- "clonotype"
for (i in seq_along(df)) {
data <- df[[i]]
data <- data.frame(table(data[,cloneCall]), stringsAsFactors = F)
colnames(data) <- c(cloneCall, "Freq")
for (y in 1:length(unique_df)){
clonotype.y <- Con.df$clonotype[y]
location.y <- which(clonotype.y == data[,cloneCall])
Con.df[y,i+1] <- data[location.y[1],"Freq"]
}
}
colnames(Con.df)[2:(length(df)+1)] <- names(df)
Con.df[is.na(Con.df)] <- 0
list <- list()
for (i in seq_along(df)) {
list[[i]] <- Con.df[,i+1]
list[[i]] <- suppressWarnings(fdiscgammagpd(list[[i]], useq = 1))
}
names(list) <- names(df)
grid <- 0:10000
distances <- get_distances(list, grid, modelType="Spliced")
hclust <- hclust(as.dist(distances), method = method)
plot <- ggdendro::ggdendrogram(hclust)
if (exportTable == T) {
clonesizeDistribution_output <<- distances
}
return(plot)
}
clonesizeDistribution(combined, cloneCall = "gene+nt", method="ward.D2")
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::build()
devtools::install()
devtools::check()
devtools::check()
save(contig_list, file=contig_list, compress='xz')
save(contig_list, file="contig_list.rda", compress='xz')
meta <- data.frame(seurat[[]], Idents(seurat))
n <- which(colnames(meta) == "seurat.active.ident")
colnames(meta)[n] <- "cluster"
is.na(meta[,"cluster"])
View(meta)
n <- which(colnames(meta) == "Idents.seurat.")
colnames(meta)[n] <- "cluster"
devtools::install()
#' @export
stripBarcode <- function(contigs, column = 1, connector = "_", num_connects = 3) {
count <- as.data.frame(t(data.frame(strsplit(contigs[,column], paste("['", connector, "']", sep="")), stringsAsFactors = FALSE)), stringsAsFactors = FALSE)[num_connects]
contigs[,column] <- count
return(contigs)
}
for (i in seq_along(contig_list)) {
contig_list[[i]] <- stripBarcode(contig_list[[i]], column = 1, connector = "_", num_connects = 3)
}
View(df)
View(contig_list)
data("contig_list") #the data built into scRepertoire
head(contig_list[[1]])
devtools::install()
devtools::document()
devtools::document()
devtools::install()
StatStratum <- ggalluvial::StatStratum
View(StatStratum)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
meta <- data.frame(seurat[[]], Idents(seurat), stringsAsFactors = F)
View(meta)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
meta <- data.frame(seurat[[]], Idents(seurat))
colnames(meta)[length(meta)] <- "cluster"
unique <- str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
df <- NULL
for (i in seq_along(unique)) {
subset <- subset(meta, meta[,"cluster"] == unique[i])
df[[i]] <- subset
}
names(df) <- unique
if (inherits(x=seurat, what ="Seurat")) {
stop("Use a seurat object to convert into a list")
}
if (class(seurat)[1], != "Seurat")) {
stop("Use a seurat object to convert into a list")
}
if (class(seurat)[1], != "Seurat") {
stop("Use a seurat object to convert into a list")
}
if (class(seurat)[1] != "Seurat") {
stop("Use a seurat object to convert into a list")
}
#' Allows users to take the meta data in seurat and place it into a list that will work with all the functions
#' @param seurat object after combineSeurat()
#' @importFrom stringr str_sort
#' @export
seurat2List <- function(seurat) {
if (class(seurat)[1] != "Seurat") {
stop("Use a seurat object to convert into a list")
}
meta <- data.frame(df@meta.data, df@active.ident)
colnames(meta)[length(meta)] <- "cluster"
unique <- str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
df <- NULL
for (i in seq_along(unique)) {
subset <- subset(meta, meta[,"cluster"] == unique[i])
df[[i]] <- subset
}
names(df) <- unique
return(df)
}
if (class(seurat)[1] != "Seurat") {
stop("Use a seurat object to convert into a list")
}
meta <- data.frame(df@meta.data, df@active.ident)
#' Allows users to take the meta data in seurat and place it into a list that will work with all the functions
#' @param seurat object after combineSeurat()
#' @importFrom stringr str_sort
#' @export
seurat2List <- function(seurat) {
if (class(seurat)[1] != "Seurat") {
stop("Use a seurat object to convert into a list")
}
meta <- data.frame(seurat[[]], Idents(seurat))
colnames(meta)[length(meta)] <- "cluster"
unique <- str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
df <- NULL
for (i in seq_along(unique)) {
subset <- subset(meta, meta[,"cluster"] == unique[i])
df[[i]] <- subset
}
names(df) <- unique
return(df)
}
meta <- data.frame(seurat[[]], Idents(seurat))
colnames(meta)[length(meta)] <- "cluster"
unique <- str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
devtools::install()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
View(contig_list)
devtools::document()
devtools::check()
devtools::check()
devtools::document()
install.packages("devtools")
devtools::install_github("ncborcherding/scRepertoire")
devtools::document()
install.packages("Seurat")
devtools::document()
devtools::document()
devtools::document()
library("Seurat", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
devtools::document()
devtools::document()
