else {
df.j <- df[[j]]
df.j <- df.j[,c("barcode",cloneCall)]
df.j_unique <- df.j[!duplicated(df.j[,cloneCall]),]
overlap <- length(intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall]))
coef_matrix[i,j] <- overlap
}
}
}
return(coef_matrix)
}
#Calculate the Overlap Coefficient for Overlap Analysis
#' @author Nick Bormann, Nick Borcherding
overlapIndex <- function(df, length, cloneCall, coef_matrix) {
for (i in seq_along(length)){
df.i <- df[[i]]
df.i <- df.i[,c("barcode",cloneCall)]
df.i_unique <- df.i[!duplicated(df.i[,cloneCall]),]
for (j in seq_along(length)){
if (i >= j){ next }
else { df.j <- df[[j]]
df.j <- df.j[,c("barcode",cloneCall)]
df.j_unique <- df.j[!duplicated(df.j[,cloneCall]),]
overlap <- length(intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall]))
coef_matrix[i,j] <-
overlap/min(length(df.i_unique[,cloneCall]),
length(df.j_unique[,cloneCall])) } } }
return(coef_matrix)
}
# This suppressing outputs for using dput()
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
# This is to help sort the type of clonotype data to use
theCall <- function(x) {
if (x %in% c("CTnt", "CTgene", "CTaa", "CTstrict")) {
x <- x
}else if (x == "gene" | x == "genes") {
x <- "CTgene"
} else if(x == "nt" | x == "nucleotide") {
x <- "CTnt"
} else if (x == "aa" | x == "amino") {
x <- "CTaa"
} else if (x == "gene+nt" | x == "strict") {
x <- "CTstrict"
}
return(x)
}
# Assigning positions for TCR contig data
#' @author Gloria Kraus, Nick Bormann, Nick Borcherding
parseTCR <- function(Con.df, unique_df, data2) {
for (y in seq_along(unique_df)){
barcode.i <- Con.df$barcode[y]
location.i <- which(barcode.i == data2$barcode)
for (z in seq_along(location.i)) {
where.chain <- data2[location.i[z],"chain"]
if (where.chain == "TRA") {
if(is.na(Con.df[y,"TCR1"])) {
Con.df[y,tcr1_lines] <- data2[location.i[z],data1_lines]
} else {
Con.df[y,tcr1_lines] <- paste(Con.df[y, tcr1_lines],
data2[location.i[z],data1_lines],sep=";")
}
} else if (where.chain == "TRB") {
if(is.na(Con.df[y,"TCR2"])) {
Con.df[y,tcr2_lines] <- data2[location.i[z],data2_lines]
} else {
Con.df[y,tcr2_lines] <- paste(Con.df[y, tcr2_lines],
data2[location.i[z],data2_lines],sep=";")
}
}
}
}
return(Con.df)
}
#Assigning positions for BCR contig data
#Now assumes lambda over kappa in the context of only 2 light chains
#' @author Gloria Kraus, Nick Bormann, Nick Borcherding
parseBCR <- function (Con.df, unique_df, data2) {
for (y in seq_along(unique_df)) {
barcode.i <- Con.df$barcode[y]
location.i <- which(barcode.i == data2$barcode)
if (length(location.i) == 2) {
if (!is.na(data2[location.i[1], c("IGHct")])) {
Con.df[y, heavy_lines] <- data2[location.i[1], h_lines]
if(is.na(data2[location.i[2], c("IGHct")])) {
if (!is.na(data2[location.i[2], c("IGLct")])) {
Con.df[y, light_lines] <- data2[location.i[2], l_lines]
} else if(!is.na(data2[location.i[2], c("IGKct")])) {
Con.df[y, light_lines] <- data2[location.i[2], k_lines]
}
}
} else if (!is.na(data2[location.i[2], c("IGHct")])) {
Con.df[y, heavy_lines] <- data2[location.i[2], h_lines]
if(is.na(data2[location.i[1], c("IGHct")])) {
if (!is.na(data2[location.i[1], c("IGLct")])) {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
} else if(!is.na(data2[location.i[1], c("IGKct")])) {
Con.df[y, light_lines] <- data2[location.i[1], k_lines]
}
}
}
}else if (length(location.i) == 1) {
chain.i <- data2$chain[location.i]
if (chain.i == "IGH") {
Con.df[y, heavy_lines] <- data2[location.i[1], h_lines]
}
else if (chain.i == "IGL") {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
}
else {
Con.df[y, light_lines] <- data2[location.i[1], k_lines]
}
}
}
return(Con.df)
}
#Assign T/B cell chains and celltypes for combineTCR() and lengthContig
cellT <- function(cells) {
if (cells == "T-AB") {
chain1 <- "TRA"
chain2 <- "TRB"
cellType <- "T-AB"
} else if (cells == "T-GD") {
chain1 <- "TRD"
chain2 <- "TRG"
cellType <- "T-GD"
} else if (cells == "B") {
chain1 <- "IGH"
chain2 <- "IGL"
cellType <- "B"
}
return(list(chain1, chain2, cellType))
}
#Producing a data frame to visualize for lengthContig()
lengthDF <- function(df, cloneCall, chain, group, c1, c2){
Con.df <- NULL
names <- names(df)
if (chain == "both") {
for (i in seq_along(df)) {
length <- nchar(gsub("_", "", df[[i]][,cloneCall]))
val <- df[[i]][,cloneCall]
if (!is.null(group)) {
cols <- df[[i]][,group]
data <- na.omit(data.frame(length, val, cols, names[i]))
colnames(data) <- c("length", "CT", group, "values")
Con.df<- rbind.data.frame(Con.df, data)
} else {
data <- na.omit(data.frame(length, val, names[i]))
colnames(data) <- c("length", "CT", "values")
Con.df<- rbind.data.frame(Con.df, data) }}
} else if (chain != "both") {
for (x in seq_along(df)) {
df[[x]] <- off.the.chain(df[[x]], chain, cloneCall)
strings <- df[[x]][,cloneCall]
val1 <- strings
for (i in seq_along(val1)) {
if (grepl(";", val1[i]) == TRUE) {
val1[i] <- str_split(val1[i], ";", simplify = TRUE)[1]
} else { next() } }
chain1 <- nchar(val1)
if (!is.null(group)) {
cols1 <- df[[x]][,group]
data1 <- data.frame(chain1, val1, names[x], c1, cols1)
colnames(data1)<-c("length","CT","values","chain",group)
}else if (is.null(group)){
data1 <- data.frame(chain1, val1, names[x], c1)
colnames(data1) <- c("length", "CT", "values", "chain")
data <- na.omit(data1)
data <- subset(data, CT != "NA" & CT != "")
Con.df<- rbind.data.frame(Con.df, data) }}
}
return(Con.df)}
#General combination of nucleotide, aa, and gene sequences for T/B cells
assignCT <- function(cellType, Con.df) {
if (cellType %in% c("T-AB", "T-GD")) {
Con.df$CTgene <- paste(Con.df$TCR1, Con.df$TCR2, sep="_")
Con.df$CTnt <- paste(Con.df$cdr3_nt1, Con.df$cdr3_nt2, sep="_")
Con.df$CTaa <- paste(Con.df$cdr3_aa1, Con.df$cdr3_aa2, sep="_")
Con.df$CTstrict <- paste(Con.df$TCR1, Con.df$cdr3_nt1,
Con.df$TCR2, Con.df$cdr3_nt2, sep="_")
} else {
Con.df$CTgene <- paste(Con.df$IGH, Con.df$IGLC, sep="_")
Con.df$CTnt <- paste(Con.df$cdr3_nt1, Con.df$cdr3_nt2, sep="_")
Con.df$CTaa <- paste(Con.df$cdr3_aa1, Con.df$cdr3_aa2, sep="_") }
return(Con.df)
}
#Sorting the V/D/J/C gene sequences for T and B cells
#' @importFrom stringr str_c str_replace_na
#' @importFrom dplyr bind_rows
makeGenes <- function(cellType, data2, chain1, chain2) {
if(cellType %in% c("T-AB", "T-GD")) {
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1,
str_c(str_replace_na(v_gene),  str_replace_na(j_gene), str_replace_na(c_gene), sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2,
str_c(str_replace_na(v_gene), str_replace_na(d_gene),  str_replace_na(j_gene),  str_replace_na(c_gene), sep = "."), NA))
}
else {
heavy <- data2[data2$chain == "IGH",] %>%
mutate(IGHct = str_c(str_replace_na(v_gene), str_replace_na(d_gene),  str_replace_na(j_gene),  str_replace_na(c_gene), sep = "."))
kappa <- data2[data2$chain == "IGK",] %>%
mutate(IGKct = str_c(str_replace_na(v_gene),  str_replace_na(j_gene), str_replace_na(c_gene), sep = "."))
lambda <- data2[data2$chain == "IGL",] %>%
mutate(IGLct = str_c(str_replace_na(v_gene),  str_replace_na(j_gene), str_replace_na(c_gene), sep = "."))
data2 <- bind_rows(heavy, kappa, lambda)
}
return(data2)
}
short.check <- function(df, cloneCall) {
min <- c()
for (x in seq_along(df)) {
min.tmp <- length(which(!is.na(unique(df[[x]][,cloneCall]))))
min <- c(min.tmp, min)
}
min <- min(min)
return(min)
}
select.gene <- function(df, chain, gene, label) {
if (chain %in% c("TRB", "TRG", "IGH")) {
gene <- unname(c(V = 1, D = 2, J = 3, C = 4)[gene])
} else {
gene <- unname(c(V = 1, J = 2, C = 3)[gene])
}
if (ncol(str_split(df[,"CTgene"], "_", simplify = TRUE)) == 1) {
C1 <- str_split(df[,"CTgene"], "_", simplify = TRUE)[,1]
C1 <- str_split(C1, "[.]", simplify = TRUE)[,gene]
df$C1 <- C1
x <- "C1"
} else {
C1 <- str_split(df[,"CTgene"], "_", simplify = TRUE)[,1]
C1 <- str_split(C1, "[.]", simplify = TRUE)[,gene]
C2 <- str_split(df[,"CTgene"], "_", simplify = TRUE)[,2]
C2 <- str_split(C2, "[.]", simplify = TRUE)[,gene]
df$C1 <- C1
df$C2 <- C2
if (chain %in% c("TRA", "TRD", "IGH")) {
x <- "C1"}
else if (chain %in% c("TRB", "TRG", "IGL")) {
x <- "C2"}
}
return(df)
}
df <- list.input.return(df, split.by)
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
df <- df[order(names(df))]
values <- str_sort(as.character(unique(names(df))), numeric = TRUE)
library(stringr)
values <- str_sort(as.character(unique(names(df))), numeric = TRUE)
df <- df[quiet(dput(values))]
num_samples <- length(df[])
names_samples <- names(df)
coef_matrix <- data.frame(matrix(NA, num_samples, num_samples))
colnames(coef_matrix) <- names_samples
rownames(coef_matrix) <- names_samples
length <- seq_len(num_samples)
chain = "both"
length <- seq_len(num_samples)
if (chain != "both") {
for (i in seq_along(df)) {
df[[i]] <- off.the.chain(df[[i]], chain, cloneCall)
}
}
if (method == "overlap") {
coef_matrix <- overlapIndex(df, length, cloneCall, coef_matrix)
} else if (method == "morisita") {
coef_matrix <- morisitaIndex(df, length, cloneCall, coef_matrix)
} else if (method == "jaccard") {
coef_matrix <- jaccardIndex(df, length, cloneCall, coef_matrix)
} else if (method == "raw") {
coef_matrix <- rawIndex(df, length, cloneCall, coef_matrix)
}
View(coef_matrix)
method == "overlap"
method = "overlap"
if (method == "overlap") {
coef_matrix <- overlapIndex(df, length, cloneCall, coef_matrix)
} else if (method == "morisita") {
coef_matrix <- morisitaIndex(df, length, cloneCall, coef_matrix)
} else if (method == "jaccard") {
coef_matrix <- jaccardIndex(df, length, cloneCall, coef_matrix)
} else if (method == "raw") {
coef_matrix <- rawIndex(df, length, cloneCall, coef_matrix)
}
cloneCall = "CTgene"
if (method == "overlap") {
coef_matrix <- overlapIndex(df, length, cloneCall, coef_matrix)
} else if (method == "morisita") {
coef_matrix <- morisitaIndex(df, length, cloneCall, coef_matrix)
} else if (method == "jaccard") {
coef_matrix <- jaccardIndex(df, length, cloneCall, coef_matrix)
} else if (method == "raw") {
coef_matrix <- rawIndex(df, length, cloneCall, coef_matrix)
}
i <- 1
df.i <- df[[i]]
df.i <- df.i[,c("barcode",cloneCall)]
df.i_unique <- df.i[!duplicated(df.i[,cloneCall]),]
View(df.i_unique)
j <- 2
df.j <- df[[j]]
df.j <- df.j[,c("barcode",cloneCall)]
df.j_unique <- df.j[!duplicated(df.j[,cloneCall]),]
View(df.j_unique)
View(df.i_unique)
overlap <- length(intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall]))
j <- 3
df.j <- df[[j]]
df.j <- df.j[,c("barcode",cloneCall)]
df.j_unique <- df.j[!duplicated(df.j[,cloneCall]),]
overlap <- length(intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall]))
df.i_unique[,cloneCall]
x <- intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall]))
x <- intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall])
x <- as.data.frame(intersect(df.i_unique[,cloneCall],
df.j_unique[,cloneCall]))
View(x)
df <- contig_list
df <- checkList(df)
df <- checkContigs(df)
out <- NULL
final <- NULL
chain1 <- cellT(cells)[[1]]
chain2 <- cellT(cells)[[2]]
cellType <- cellT(cells)[[3]]
cells = "T-AB"
df <- checkList(df)
df <- checkContigs(df)
out <- NULL
final <- NULL
chain1 <- cellT(cells)[[1]]
chain2 <- cellT(cells)[[2]]
cellType <- cellT(cells)[[3]]
samples = c("PY", "PY", "PX", "PX", "PZ","PZ")
ID = c("P", "T", "P", "T", "P", "T")
for (i in seq_along(df)) {
df[[i]]$sample <- samples[i]
df[[i]]$ID <- ID[i]
if (filterMulti == TRUE) {
df[[i]] <- filteringMulti(df[[i]]) }
}
filterMulti = FALSE)
filterMulti = FALSE
for (i in seq_along(df)) {
df[[i]]$sample <- samples[i]
df[[i]]$ID <- ID[i]
if (filterMulti == TRUE) {
df[[i]] <- filteringMulti(df[[i]]) }
}
if (!is.null(samples)) {
out <- modifyBarcodes(df, samples, ID)
} else {
out <- df
}
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
unique_df <- unique(data2$barcode)
library(dplyr)
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
unique_df <- unique(data2$barcode)
Con.df <- data.frame(matrix(NA, length(unique_df), 7))
colnames(Con.df) <- c("barcode",tcr1_lines, tcr2_lines)
utils::globalVariables(c("v_gene", "j_gene", "c_gene", "d_gene", "chain"))
heavy_lines <- c("IGH", "cdr3_aa1", "cdr3_nt1", "vgene1")
light_lines <- c("IGLC", "cdr3_aa2", "cdr3_nt2", "vgene2")
l_lines <- c("IGLct", "cdr3", "cdr3_nt", "v_gene")
k_lines <- c("IGKct", "cdr3", "cdr3_nt", "v_gene")
h_lines <- c("IGHct", "cdr3", "cdr3_nt", "v_gene")
tcr1_lines <- c("TCR1", "cdr3_aa1", "cdr3_nt1")
tcr2_lines <- c("TCR2", "cdr3_aa2", "cdr3_nt2")
data1_lines <- c("TCR1", "cdr3", "cdr3_nt")
data2_lines <- c("TCR2", "cdr3", "cdr3_nt")
CT_lines <- c("CTgene", "CTnt", "CTaa", "CTstrict", "cellType")
utils::globalVariables(c("heavy_lines", "light_lines", "l_lines", "k_lines",
"h_lines", "tcr1_lines", "tcr2_lines", "data1_lines",
"data2_lines", "CT_lines"))
colnames(Con.df) <- c("barcode",tcr1_lines, tcr2_lines)
Con.df$barcode <- unique_df
Con.df <- parseTCR(Con.df, unique_df, data2)
Con.df <- assignCT(cellType, Con.df)
Con.df$cellType <- cells
View(Con.df)
View(data2)
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
#' @import dplyr
#' @export
#' @return List of clonotypes for individual cell barcodes
combineTCR <- function(df,
samples = NULL,
ID = NULL,
cells = "T-AB",
removeNA = FALSE,
removeMulti = FALSE,
filterMulti = FALSE) {
df <- checkList(df)
df <- checkContigs(df)
out <- NULL
final <- NULL
chain1 <- cellT(cells)[[1]]
chain2 <- cellT(cells)[[2]]
cellType <- cellT(cells)[[3]]
for (i in seq_along(df)) {
df[[i]] <- subset(df[[i]], chain != "Multi")
df[[i]] <- subset(df[[i]], productive %in% c(TRUE, "TRUE", "True", "true"))
df[[i]]$sample <- samples[i]
df[[i]]$ID <- ID[i]
if (filterMulti == TRUE) {
df[[i]] <- filteringMulti(df[[i]]) }
}
if (!is.null(samples)) {
out <- modifyBarcodes(df, samples, ID)
} else {
out <- df
}
for (i in seq_along(out)) {
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
unique_df <- unique(data2$barcode)
Con.df <- data.frame(matrix(NA, length(unique_df), 7))
colnames(Con.df) <- c("barcode",tcr1_lines, tcr2_lines)
Con.df$barcode <- unique_df
Con.df <- parseTCR(Con.df, unique_df, data2)
Con.df <- assignCT(cellType, Con.df)
Con.df$cellType <- cells
Con.df[Con.df == "NA_NA" | Con.df == "NA_NA_NA_NA"] <- NA
data3 <- merge(data2[,-which(names(data2) %in% c("TCR1","TCR2"))],
Con.df, by = "barcode")
if (!is.null(sample) & !is.null(ID)) {
data3<-data3[,c("barcode","sample","ID",tcr1_lines,tcr2_lines,
CT_lines)] }
else if (!is.null(sample) & is.null(ID)) {
data3<-data3[,c("barcode","sample",tcr1_lines,tcr2_lines,
CT_lines)]
}
final[[i]] <- data3 }
names <- NULL
for (i in seq_along(samples)) {
if (!is.null(sample) & !is.null(ID)) {
c <- paste(samples[i], "_", ID[i], sep="")
} else if (!is.null(sample) & is.null(ID)) {
c <- paste(samples[i], sep="")
}
names <- c(names, c)}
names(final) <- names
for (i in seq_along(final)){
final[[i]]<-final[[i]][!duplicated(final[[i]]$barcode),]
final[[i]]<-final[[i]][rowSums(is.na(final[[i]])) < 10, ]}
if (removeNA == TRUE) { final <- removingNA(final)}
if (removeMulti == TRUE) { final <- removingMulti(final) }
return(final) }
df <- checkList(df)
df <- checkContigs(df)
out <- NULL
final <- NULL
chain1 <- cellT(cells)[[1]]
chain2 <- cellT(cells)[[2]]
cellType <- cellT(cells)[[3]]
for (i in seq_along(df)) {
df[[i]] <- subset(df[[i]], chain != "Multi")
df[[i]] <- subset(df[[i]], productive %in% c(TRUE, "TRUE", "True", "true"))
df[[i]]$sample <- samples[i]
df[[i]]$ID <- ID[i]
if (filterMulti == TRUE) {
df[[i]] <- filteringMulti(df[[i]]) }
}
if (!is.null(samples)) {
out <- modifyBarcodes(df, samples, ID)
} else {
out <- df
}
for (i in seq_along(out)) {
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
unique_df <- unique(data2$barcode)
Con.df <- data.frame(matrix(NA, length(unique_df), 7))
colnames(Con.df) <- c("barcode",tcr1_lines, tcr2_lines)
Con.df$barcode <- unique_df
Con.df <- parseTCR(Con.df, unique_df, data2)
Con.df <- assignCT(cellType, Con.df)
Con.df$cellType <- cells
Con.df[Con.df == "NA_NA" | Con.df == "NA_NA_NA_NA"] <- NA
data3 <- merge(data2[,-which(names(data2) %in% c("TCR1","TCR2"))],
Con.df, by = "barcode")
if (!is.null(sample) & !is.null(ID)) {
data3<-data3[,c("barcode","sample","ID",tcr1_lines,tcr2_lines,
CT_lines)] }
else if (!is.null(sample) & is.null(ID)) {
data3<-data3[,c("barcode","sample",tcr1_lines,tcr2_lines,
CT_lines)]
}
final[[i]] <- data3 }
View(Con.df)
devtools::check()
setwd("~/Documents/GitHub/scRepertoire")
devtools::document()
devtools::check()
colnames(df[[i]]
)
c("chain", "productive") %in% colnames(df[[i]])
devtools::check()
devtools::install()
