ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve3 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve3)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve4 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve1 + curve2 + curve3 + curve4 + plot_layout(ncol = 1)
ggsave(paste0("./DataAnalysis/slingshot/curves/", top20[i], ".png"), dpi = 600, height = 5, width = 3)
}
set.seed(123)
sub <- master.df[sample(nrow(master.df), nrow(master.df)*0.3),]
for(i in seq_along(top20)) {
curve1 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve1)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve2 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve2)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve3 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve3)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve4 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
curve1 + curve2 + curve3 + curve4 + plot_layout(ncol = 1)
ggsave(paste0("./DataAnalysis/slingshot/curves/", top20[i], ".png"), dpi = 600, height = 5, width = 3)
}
ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
stat_smooth(method = "loess", color = "black", se = FALSE, lwd = 0.5)
ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
i <- 2
ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
for(i in seq_along(top20)) {
curve1 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve1)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve2 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve2)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve3 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve3)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve4 <- ggplot(sub, aes(y=log(sub[,top20[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top20[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve1 + curve2 + curve3 + curve4 + plot_layout(ncol = 1)
ggsave(paste0("./DataAnalysis/slingshot/curves/", top20[i], ".png"), dpi = 600, height = 5, width = 3)
}
for(i in seq_along(top50)) {
curve1 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve1)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve2 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve2)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve3 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve3)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve4 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve1 + curve2 + curve3 + curve4 + plot_layout(ncol = 1)
ggsave(paste0("./DataAnalysis/slingshot/curves/", top50[i], ".png"), dpi = 600, height = 5, width = 3)
}
where <- which(rownames(seurat.tmp@assays$RNA@counts) %in% top50)
master.df <- data.frame(seurat.tmp[[]], t(as.matrix(seurat.tmp@assays$RNA@counts[where,])))
sub <- master.df[sample(nrow(master.df), nrow(master.df)*0.3),]
top50 <- top50[top50 %in% colnames(master.df)]
for(i in seq_along(top50)) {
curve1 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve1)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve2 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve2)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve3 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve3)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
theme(axis.title.x = element_blank())+
scale_color_manual(values = mycolors) +
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve4 <- ggplot(sub, aes(y=log(sub[,top50[i]]),x = curve4)) +
geom_point(aes(color = seurat_clusters)) +
theme_classic()+
guides(color = FALSE) +
ylab(top50[i]) +
scale_color_manual(values = mycolors) +
theme(axis.title.x = element_blank())+
geom_smooth(color = "black", se = FALSE, lwd = 0.5)
curve1 + curve2 + curve3 + curve4 + plot_layout(ncol = 1)
ggsave(paste0("./DataAnalysis/slingshot/curves/", top50[i], ".png"), dpi = 600, height = 5, width = 3)
}
cell_colors_clust <- cell_pal(seurat.tmp@active.ident, hue_pal())
#Making plots more siminmar to ggplot outputs of Seurat
cell_pal <- function(cell_vars, pal_fun,...) {
if (is.numeric(cell_vars)) {
pal <- pal_fun(100, ...)
return(pal[cut(cell_vars, breaks = 100)])
} else {
categories <- sort(unique(cell_vars))
pal <- setNames(pal_fun(length(categories), ...), categories)
return(pal[cell_vars])
}
}
library(scales)
cell_colors_clust <- cell_pal(seurat.tmp@active.ident, hue_pal())
pdf("./DataAnalysis/slingshot/Trajectory.pdf", height=4, width=4)
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
lines(sds, lwd = 2, type = 'lineages', col = 'black')
dev.off()
cell_colors_clust <- cell_pal(seurat.tmp$seurat_clusters, hue_pal())
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
cell_colors_clust <- cell_pal(malignant$seurat_clusters, hue_pal())
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
lines(sds, lwd = 2, type = 'lineages', col = 'black')
pdf("./DataAnalysis/slingshot/Trajectory_stepwise.pdf", height=4, width=4)
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
lines(sds, lwd = 2, type = 'lineages', col = 'black')
dev.off()
pdf("./DataAnalysis/slingshot/Trajectory_curves.pdf", height=4, width=4)
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
lines(sds, lwd = 2, type = 'lineages', col = 'black')
dev.off()
pdf("./DataAnalysis/slingshot/Trajectory_stepwise.pdf", height=4, width=4)
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
lines(sds, lwd = 2, type = 'lineages', col = 'black')
dev.off()
pdf("./DataAnalysis/slingshot/Trajectory_curves.pdf", height=4, width=4)
plot(reducedDim(sds), col = cell_colors_clust, pch = 16, cex = 0.25)
lines(sds, lwd = 2, col = 'black')
dev.off()
JSS.combined.myeloid <- readRDS("~/Downlaods/JSS.combined.myeloid.rds")
JSS.combined.myeloid <- readRDS("~/Downloads/JSS.combined.myeloid.rds")
Idents(JSS.combined.myeloid) <- factor(Idents(JSS.combined.myeloid), levels = c("monocytes", "monocytes CD16+", "monocytes/T", "moDC", "moDC CD16+",
"DC F4/80", "DC CD123+", "pDC"))
JSS.combined.myeloid$seurat_clusters <- RenameIdents(JSS.combined.myeloid$seurat_clusters, )
JSS.combined.myeloid$seurat_clusters <- RenameIdents(JSS.combined.myeloid$seurat_clusters)
Idents(JSS.combined.myeloid) <- factor(Idents(JSS.combined.myeloid), levels = c("monocytes", "monocytes CD16+", "monocytes/T", "moDC", "moDC CD16+",
"DC F4/80", "DC CD123+", "pDC"))
DimPlot(JSS.combined.myeloid)
JSS.combined.myeloid <- readRDS("~/Downloads/JSS.combined.myeloid.rds")
DimPlot(JSS.combined.myeloid)
new.ident <- c("monocytes", "monocytes CD16+", "monocytes/T", "moDC", "moDC CD16+",
"DC F4/80", "DC CD123+", "pDC")
names(new.ident) <- levels(JSS.combined.myeloid)
names(new.ident) <- levels(JSS.combined.myeloid@active.ident)
JSS.combined.myeloid <- RenameIdents(JSS.combined.myeloid, '0' = "monocytes", '1' = "monocytes CD16+", '2' = "monocytes", '3' = "DC F4/80+",
'4' = "monocytes/T", '5' = "monocytes", '6' = "moDC CD16+", '7' = "DC CD123+", '8' = "pDC",
'9' = "moDC")
DimPlot(JSS.combined.myeloid)
JSS.combined.myeloid$new.ident <- JSS.combined.myeloid@active.ident
cc.genes <- Seurat::cc.genes.updated.2019
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
JSS.combined.myeloid <- CellCycleScoring(JSS.combined.myeloid, s.features = s.genes,
g2m.features = g2m.genes, set.ident = TRUE)
freq_table <- JSS.combined.myeloid[[]]
freq_table <- freq_table[,c("Subset", "new.ident", "Phase")]
freq_table <- subset(freq_table, Phase != "Undecided") #removing undecided phases
freq_table <- freq_table %>%
group_by(Subset, seurat_clusters, Phase) %>%
summarise(n = n())
freq_table <- freq_table %>%
group_by(Subset, new.ident, Phase) %>% #changed seurat.clusters to new.ident
summarise(n = n())
freq_table$Phase <- factor(freq_table$Phase, levels = c("G1", "S", "G2M")) #ordering phases
levels(JSS.combined.myeloid)
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=n, fill=Phase)) +
geom_bar(stat="identity", position="fill", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic()
#colorblind_vector <- viridis_pal()(7)
colorblind_vector <- colorRampPalette(c("#FF4B20", "#FFB433", "#C6FDEC", "#7AC5FF", "#0348A6"))
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=n, fill=Phase)) +
geom_bar(stat="identity", position="fill", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic()
#In order to get percentage numbers we need to add the columns up
freq_table <- freq_table %>%
group_by(Subset, new.ident) %>% #changed seurat.clusters to new.ident
mutate(sum = sum(n))
freq_table$percent <- n/sum
freq_table$percent <- round((freq_table$n/freq_table$sum)/2)
View(freq_table)
freq_table$percent <- round((freq_table$n/freq_table$sum)/2)
freq_table$percent <- round((freq_table$n/freq_table$sum)*100)
freq_table$percent <- round((freq_table$n/freq_table$sum)*100, 1)
geom_text(aes(label = percent),
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=n, fill=Phase)) +
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=n, fill=Phase)) +
geom_bar(stat="identity", position="fill", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5))
freq_table$percent <- round((freq_table$n/freq_table$sum), 3)
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=n, fill=Phase)) +
geom_bar(stat="identity", position="fill", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5))
View(freq_table)
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=percent, fill=Phase)) +
geom_bar(stat="identity", position="fill", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5))
freq_table$percent <- round((freq_table$n/freq_table$sum)*100, 1)
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=percent, fill=Phase)) +
geom_bar(stat="identity", position="fill", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5))
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=percent, fill=Phase)) +
geom_bar(stat="identity", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5))
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=percent, fill=Phase)) +
geom_bar(stat="identity", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5), size = 2)
JSS.combined.myeloid <- readRDS("~/Downloads/JSS.combined.myeloid.rds")
#Labeles from your code
JSS.combined.myeloid <- RenameIdents(JSS.combined.myeloid, '0' = "monocytes", '1' = "monocytes CD16+", '2' = "monocytes", '3' = "DC F4/80+",
'4' = "monocytes/T", '5' = "monocytes", '6' = "moDC CD16+", '7' = "DC CD123+", '8' = "pDC",
'9' = "moDC")
#Storing the new identities in your meta data
JSS.combined.myeloid$new.ident <- JSS.combined.myeloid@active.ident
#Normal Cell cycle regression from your code
cc.genes <- Seurat::cc.genes.updated.2019
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
JSS.combined.myeloid <- CellCycleScoring(JSS.combined.myeloid, s.features = s.genes,
g2m.features = g2m.genes, set.ident = FALSE) #Changed this to false
freq_table <- JSS.combined.myeloid[[]]
freq_table <- freq_table[,c("Subset", "new.ident", "Phase")] #changed seurat.clusters to new.ident
freq_table <- subset(freq_table, Phase != "Undecided") #removing undecided phases
freq_table <- freq_table %>%
group_by(Subset, new.ident, Phase) %>% #changed seurat.clusters to new.ident
summarise(n = n())
#In order to get percentage numbers we need to add the columns up
#You will need to do this for each way you place to visualize the
#stacked columns - he for instance you want to include both "Subset"
#and "new.ident" so you can facet_grid(Subset~.) later
freq_table <- freq_table %>%
group_by(Subset, new.ident) %>% #changed seurat.clusters to new.ident
mutate(sum = sum(n))
freq_table$percent <- round((freq_table$n/freq_table$sum)*100, 1)
freq_table$Phase <- factor(freq_table$Phase, levels = c("G1", "S", "G2M")) #ordering phases
levels(JSS.combined.myeloid)
#Below you might want to play around to get a different order of your new labels
#freq_table$seurat_clusters <- factor(freq_table$seurat_clusters, levels = c(0,1,2,3,4,5,6,7,8,9))
ggplot(freq_table, aes(x=new.ident, y=percent, fill=Phase)) +
geom_bar(stat="identity", color="black", lwd=0.25) +
theme(axis.title.x = element_blank())+
facet_grid(Subset ~.) +
scale_fill_manual(values=colorblind_vector(3)) +
theme_classic() +
geom_text(aes(label = percent),
position = position_stack(vjust = .5), size = 2)
names(JSS.combined.myeloid)
seurat.tmp <- readRDS("seurat.tmp.rds")
alignant <- subset(seurat.tmp, malignant == "Malignant")
mal_low <- table(malignant@active.ident)
rm(alignant)
malignant <- subset(seurat.tmp, malignant == "Malignant")
mal_low <- table(malignant@active.ident)
mal_low <- mal_low[mal_low > 50]
malignant$clusters <- malignant@active.ident
malignant <- subset(malignant, clusters %in% unlist(names(mal_low)))
meta <- malignant[[]]
sce <- as.SingleCellExperiment(malignant, assay = "RNA")
library(Seurat)
sce <- as.SingleCellExperiment(malignant, assay = "RNA")
sce <- as.SingleCellExperiment(DietSeurat(malignant), assay = "RNA")
sce <- slingshot(sce, clusterLabels = colData(sce)$seurat_clusters,
allow.breaks = TRUE, reducedDim = "UMAP", start.clus = 1) #Calcualting the trajectory
library(slingshot)
sce <- slingshot(sce, clusterLabels = colData(sce)$seurat_clusters,
allow.breaks = TRUE, reducedDim = "UMAP", start.clus = 1) #Calcualting the trajectory
library(SingleCellExperiment)
sce <- slingshot(sce, clusterLabels = colData(sce)$seurat_clusters,
allow.breaks = TRUE, reducedDim = "UMAP", start.clus = 1) #Calcualting the trajectory
getwd()
meta <- read.csv("IB_Persistence.hashtag_metadata.csv")
setwd("~/Desktop/PENN")
contigs <- read.csv("filtered_contig_annotations.csv")
meta <- read.csv("IB_Persistence.hashtag_metadata.csv")
View(meta)
sc.barcodes <- unique(rownames(meta))
View(contigs)
tcr.barcodes <- unique(rownames(contigs))
tcr.barcodes <- unique(rownames(contigs$barcode))
tcr.barcodes <- unique(contigs$barcode)
table(meta$HTO_maxID)
table(meta$HTO_secondID)
cont.tmp <- contigs[contigs$barcode %in% rownames(meta) ]
cont.tmp <- contigs[contigs$barcode %in% rownames(meta), ]
View(meta)
meta <- read.csv("IB_Persistence.hashtag_metadata.csv", row.names = 1)
cont.tmp <- contigs[contigs$barcode %in% rownames(meta), ]
groupBy = c("$HTO_maxID", "HTO_secondID")
paste(groupBy)
meta[paste(groupBy),]
meta[,paste(groupBy)]
meta[,paste(groupBy)]
groupBy = c("HTO_maxID", "HTO_secondID")
meta[,paste(groupBy)]
paste(meta[,paste(groupBy)], ".")
data <- within(meta,  id <- paste(groupBy, sep=""))
within(meta,  id <- paste(groupBy, sep=""))
id <- paste(groupBy, sep="")
data <- within(meta,  id <- paste(groupBy, sep="."))
data <- within(meta,  paste(groupBy, sep="."))
View(data)
data <- within(meta,  paste(meta[,groupBy], sep="."))
data <- with(meta,  paste(meta[,groupBy], sep="."))
in
data <- within(meta,  paste(meta[,groupBy], sep="."))
library(stringr)
str_c(meta[,groupBy], sep=".")
str_c(meta, groupBy, sep=".")
str_c(meta[,which(colnames(meta) %in% groupBy], sep=".")
str_c(meta[,which(colnames(meta)) %in% groupBy], sep=".")
str_c(meta[,which(colnames(meta) %in% groupBy)], sep=".")
meta["groupBy"] <- apply(meta[ , groupBy] , 1 , paste , collapse = "-" )
View(meta)
meta <- read.csv("IB_Persistence.hashtag_metadata.csv", row.names = 1)
meta["groupBy"] <- apply(meta[ , groupBy] , 1 , paste , collapse = "." )
meta["groupBy"] <- apply(meta[ , groupBy] , 1 , paste , collapse = "." )
unique.groups <- unique(meta$groupBy)
i <- 1
for (i in seq_along(unique.groups)) {
sub.con <- cont.tmp[rownames(cont.tmp) %in% subset(meta, groupBy == unique.groups[i])]
}
sub.con <- cont.tmp[rownames(cont.tmp) %in% subset(meta, groupBy == unique.groups[i]),]
subset(meta, groupBy == unique.groups[i])
sub.con <- cont.tmp[cont.tmp$barcode %in% rownames(subset(meta, groupBy == unique.groups[i])),]
str_split(unique.groups[i], ".")[1]
str_split(unique.groups[i], ".", simplify = TRUE)[1]
sample <- str_split(unique.groups[i], "[.]", simplify = TRUE)[1]
createHTOContigList <- function(contigs, sc, groupBy = NULL){
contig.list <- NULL
checkSingleObject(sc)
meta <- grabMeta(sc)
cont.tmp <- contigs[contigs$barcode %in% rownames(meta), ]
meta["groupBy"] <- apply(meta[ , groupBy] , 1 , paste , collapse = "." )
unique.groups <- unique(meta$groupBy)
for (i in seq_along(unique.groups)) {
sub.con <- cont.tmp[cont.tmp$barcode %in% rownames(subset(meta, groupBy == unique.groups[i])),]
contig.list[[i]] <- sub.con
}
names(contig.list) <- unique.groups
return(contig.list)
}
install.packages("devtools")
devtools::check()
setwd("~/Documents/GitHub/scRepertoire")
devtools::check()
install.packages("stringdist")
install.packages("ggalluvial")
install.packages("doParallel")
BiocManager::install("powerTCR")
n
\
install.packages("vegan")
devtools::check()
BiocManager::install("BiocStyle")
devtools::check()
BiocManager::install("scater")
devtools::check()
install.packages("circlize")
devtools::check()
