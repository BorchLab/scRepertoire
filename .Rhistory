w2b <- colorRampPalette(c("#FFFFFF", "#808080", "#000000"))
pseudoCol <- w2b(50)
curvesCol <- viridis::viridis_pal()(lineages)
names(curvesCol) <- 1:lineages
w2b <- colorRampPalette(c("#FFFFFF", "#808080", "#000000"))
pseudoCol <- w2b(50)
names(pseudoCol) <- 1:50
color_pal <- list(curves = curvesCol,
pseudo = pseudoCol)
for (j in seq_len(lineages)) {
master.list <- NULL
for (k in seq_along(orders)) {
if(patients[i] == "1135") {
genes <- rownames(assocRes)[
which(p.adjust(assocRes[,paste0("waldStat_", j)], "fdr") <= 0.05)]
} else {
genes <- rownames(assocRes)[
which(p.adjust(assocRes[,paste0("waldStat_lineage", j, "_condition", k)], "fdr") <= 0.05)]
}
master.list <- c(master.list, genes)
}
master.list <- unique(master.list)
yhatSmooth <- predictSmooth(sce.tmp2, gene = master.list, nPoints = 50, tidy = FALSE)
headers <- as.data.frame(stringr::str_split(colnames(yhatSmooth), "_", simplify = TRUE))
if(patients[i] == "1135") {
colnames(headers) <- c("curves", "pseudo")
headers$curves <- stringr::str_remove_all(headers$curves, "lineage")
headers$pseudo <- stringr::str_remove_all(headers$pseudo, "point")
rownames(headers) <- colnames(yhatSmooth)
curvesCol <- viridis::viridis_pal()(lineages)
names(curvesCol) <- 1:lineages
w2b <- colorRampPalette(c("#FFFFFF", "#808080", "#000000"))
pseudoCol <- w2b(50)
names(pseudoCol) <- 1:50
color_pal <- list(curves = curvesCol,
pseudo = pseudoCol)
}else {
colnames(headers) <- c("curves", "order", "pseudo")
headers$curves <- stringr::str_remove_all(headers$curves, "lineage")
headers$order <- stringr::str_remove_all(headers$order, "condition")
headers$pseudo <- stringr::str_remove_all(headers$pseudo, "point")
rownames(headers) <- colnames(yhatSmooth)
curvesCol <- viridis::viridis_pal()(lineages)
names(curvesCol) <- 1:lineages
orderCol <- scales::hue_pal()(length(orders))
names(orderCol) <- 1:max(orders)
w2b <- colorRampPalette(c("#FFFFFF", "#808080", "#000000"))
pseudoCol <- w2b(50)
names(pseudoCol) <- 1:50
color_pal <- list(curves = curvesCol,
order = orderCol,
pseudo = pseudoCol)
}
positions <- which(headers$curves == j)
map <- t(scale(t(yhatSmooth[,positions])))
pdf(paste0("./DataAnalysis/slingshot/", patients[i], "/Curve", j, "_heatmap.pdf"), height =7, width = 7)
pheatmap::pheatmap(map,
cluster_cols = FALSE,
show_rownames = TRUE,
annotation_col = headers,
annotation_colors = color_pal,
fontsize = 3,
show_colnames = FALSE,
color = viridis::viridis_pal(option = "B")(100))
dev.off()
}
BiocManager::install("CATALYST")
T1 <- read.csv("~/Documents/GitHub/utility/data/SequencingRuns/RT1/filtered_contig_annotations.csv")
T1 <- read.csv("~/Documents/GitHub/utility/data/SequencingRuns/RT1/filtered_contig_annotations.csv")
S1 <- read.csv("~/Documents/GitHub/utility/data/SequencingRuns/RB1/filtered_contig_annotations.csv")
T1 <- separate (T1, barcode,into = c("barcode","sample"))
library(tidyr)
T1 <- separate (T1, barcode,into = c("barcode","sample"))
T1$sample <- "1"
T1 <- unite (T1, barcode,barcode,sample, sep ="-" )
View(T1)
S1 <- separate (S1, barcode,into = c("barcode","sample"))
S1$sample <- "2"
S1 <- unite (S1, barcode,barcode,sample, sep ="-" )
View(S1)
contig_list <- list(T1, S1)
combined <- combineTCR(contig_list,
samples = c("t", "s"),
ID = c("1", "2"),
filterMulti = TRUE, cells ="T-AB")
library(scRepertoire)
combined <- combineTCR(contig_list,
samples = c("t", "s"),
ID = c("1", "2"),
filterMulti = TRUE, cells ="T-AB")
View(S1)
table(combined$s_2$CTgene)
table(combined$s_2$CTnt)
cells = "T-AB"
filterMulti = TRUE
samples = c("t", "s")
ID = c("1", "2")
df <- contig_list
out <- NULL
final <- NULL
chain1 <- cellT(cells)[[1]]
#Assign T/B cell chains and celltypes for combineTCR() and lengthContig
cellT <- function(cells) {
if (cells == "T-AB") {
chain1 <- "TRA"
chain2 <- "TRB"
cellType <- "T-AB"
} else if (cells == "T-GD") {
chain1 <- "TRD"
chain2 <- "TRG"
cellType <- "T-GD"
} else if (cells == "B") {
chain1 <- "IGH"
chain2 <- "IGL"
cellType <- "B"
}
return(list(chain1, chain2, cellType))
}
chain1 <- cellT(cells)[[1]]
chain2 <- cellT(cells)[[2]]
cellType <- cellT(cells)[[3]]
i <- 1
df[[i]] <- subset(df[[i]], chain != "Multi")
df[[i]] <- subset(df[[i]], chain %in% c(chain1, chain2))
df[[i]] <- subset(df[[i]], productive %in% c(TRUE, "TRUE", "True", "true"))
if (nrow(df[[i]]) == 0) {
stop("There are 0 contigs
after internal filtering - check the contig list to see
if any issues exist for productive chains", call. = FALSE)
}
df[[i]] <- subset(df[[i]], cdr3 != "None")
df[[i]]$sample <- samples[i]
df[[i]]$ID <- ID[i]
x <- df[[1]]
View(x)
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
library(dplyr)
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
x <- df[[1]]
y <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
table <- subset(as.data.frame(table(x$barcode)), Freq > 2)
View(table)
nrow(table) > 0
barcodes <- as.character(unique(table$Var1))
multichain <- NULL
for (j in seq_along(barcodes)) {
chain <- x[x$barcode == barcodes[j],] %>%
group_by(barcode) %>% top_n(n = 2, wt = reads)
multichain <- rbind(multichain, chain)
}
View(multichain)
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
table <- subset(as.data.frame(table(x$barcode)), Freq > 2)
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
table <- subset(as.data.frame(table(x$barcode)), Freq > 2)
if (nrow(table) > 0) {
barcodes <- as.character(unique(table$Var1))
multichain <- NULL
for (j in seq_along(barcodes)) {
chain <- x[x$barcode == barcodes[j],] %>%
group_by(barcode) %>% top_n(n = 2, wt = reads)
multichain <- rbind(multichain, chain)
}
x <- subset(x, barcode %!in% barcodes)
x <- rbind(x, multichain)
}
return(x)
x <- df[[2]]
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
table <- subset(as.data.frame(table(x$barcode)), Freq > 2)
if (nrow(table) > 0) {
barcodes <- as.character(unique(table$Var1))
multichain <- NULL
for (j in seq_along(barcodes)) {
chain <- x[x$barcode == barcodes[j],] %>%
group_by(barcode) %>% top_n(n = 2, wt = reads)
multichain <- rbind(multichain, chain)
}
x <- subset(x, barcode %!in% barcodes)
x <- rbind(x, multichain)
}
"%!in%" <- Negate("%in%")
View(x)
x <- df[[2]]
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
table <- subset(as.data.frame(table(x$barcode)), Freq > 2)
if (nrow(table) > 0) {
barcodes <- as.character(unique(table$Var1))
multichain <- NULL
for (j in seq_along(barcodes)) {
chain <- x[x$barcode == barcodes[j],] %>%
group_by(barcode) %>% top_n(n = 2, wt = reads)
multichain <- rbind(multichain, chain)
}
x <- subset(x, barcode %!in% barcodes)
x <- rbind(x, multichain)
}
if (filterMulti == TRUE) {
df[[i]] <- filteringMulti(df[[i]]) }
#Removing extra clonotypes in barcodes with > 2 productive contigs
#' @import dplyr
filteringMulti <- function(x) {
x <- x %>%
group_by(barcode, chain) %>%
top_n(n = 1, wt = reads)
table <- subset(as.data.frame(table(x$barcode)), Freq > 2)
if (nrow(table) > 0) {
barcodes <- as.character(unique(table$Var1))
multichain <- NULL
for (j in seq_along(barcodes)) {
chain <- x[x$barcode == barcodes[j],] %>%
group_by(barcode) %>% top_n(n = 2, wt = reads)
multichain <- rbind(multichain, chain)
}
x <- subset(x, barcode %!in% barcodes)
x <- rbind(x, multichain)
}
return(x)
}
if (filterMulti == TRUE) {
df[[i]] <- filteringMulti(df[[i]]) }
#Sorting the V/D/J/C gene sequences for T and B cells
makeGenes <- function(cellType, data2, chain1, chain2) {
if(cellType %in% c("T-AB", "T-GD")) {
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, paste(with(data2,
interaction(v_gene,  j_gene, c_gene))), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, paste(with(data2,
interaction(v_gene, d_gene,  j_gene,  c_gene))), NA))
}
else {
data2 <- data2 %>%
mutate(IGKct = ifelse(chain == "IGK", paste(with(data2,
interaction(v_gene,  j_gene, c_gene))), NA)) %>%
mutate(IGLct = ifelse(chain == "IGL", paste(with(data2,
interaction(v_gene,  j_gene, c_gene))), NA)) %>%
mutate(IGHct = ifelse(chain == "IGH", paste(with(data2,
interaction(v_gene, d_gene, j_gene, c_gene))), NA))
}
return(data2)
}
data2 <- makeGenes(cellType, data2, chain1, chain2)
out <- df
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
View(data2)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, unite(v_gene,  j_gene, c_gene), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, unite(v_gene, d_gene,  j_gene,  c_gene), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, unite(c(v_gene,  j_gene, c_gene)), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, unite(c(v_gene, d_gene,  j_gene,  c_gene)), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, unite(c(v_gene,  j_gene, c_gene), sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, unite(c(v_gene, d_gene,  j_gene,  c_gene), sep = "."), NA))
data2 <- data2 %>%
mutate(ifelse(chain == chain1, unite("TCR1", c(v_gene,  j_gene, c_gene), sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, unite(c(v_gene, d_gene,  j_gene,  c_gene), sep = "."), NA))
data2 <- data2 %>%
mutate(ifelse(chain == chain1, unite("TCR1", c(v_gene,  j_gene, c_gene), sep = "."), NA))
data2 <- data2 %>%
unite("TCR1", c(v_gene,  j_gene, c_gene), sep = "."), NA))
data2 <- data2 %>%
unite("TCR1", c(v_gene,  j_gene, c_gene), sep = "."), NA)
data2 <- data2 %>%
unite("TCR1", c(v_gene,  j_gene, c_gene), sep = ".")
data2 <- out[[i]]
data2 <- data2 %>%
unite("TCR1", c(v_gene,  j_gene, c_gene), sep = ".", remove = FALSE)
data2 <- data2 %>%
group_by(chain)
data2 <- data2 %>%
group_by(chain) %>%
unite("TCR1", c(v_gene,  j_gene, c_gene), sep = ".", remove = FALSE)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, paste(with(data2,
interaction(v_gene,  j_gene, c_gene))), NA))
data2 <- out[[i]]
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, paste(with(data2,
interaction(v_gene,  j_gene, c_gene))), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, with(data2,
paste(v_gene,  j_gene, c_gene, sep = "."))), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, with(data2,
paste(v_gene,  j_gene, c_gene, sep = "."))), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, unite(v_gene,  j_gene, c_gene, sep = "."))), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, unite(v_gene,  j_gene, c_gene, sep = ".", remove = FALSE)), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(v_gene,  j_gene, c_gene, sep = ".", remove = FALSE)), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(data[,c("v_gene",  "j_gene", "c_gene")], sep = ".")), NA)
library(stringr)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(data[,c("v_gene",  "j_gene", "c_gene")], sep = ".")), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(data[,"v_gene")],  data[,"j_gene"], data[,"c_gene"])], sep = ".")), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(data[,"v_gene"],  data[,"j_gene"], data[,"c_gene"], sep = ".")), NA)
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(data[,"v_gene"],  data[,"j_gene"], data[,"c_gene"], sep = "."), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(data$v_gene,  data$j_gene, data$c_gene, sep = "."), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(c(data$v_gene,  data$j_gene, data$c_gene), sep = "."), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(v_gene,  j_gene, c_gene, sep = "."), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(v_gene,  j_gene, c_gene, sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, str_c(v_gene, d_gene,  j_gene,  c_gene), sep = "."), NA))
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1, str_c(v_gene,  j_gene, c_gene, sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2, str_c(v_gene, d_gene,  j_gene,  c_gene, sep = "."), NA))
#Sorting the V/D/J/C gene sequences for T and B cells
#' @importFrom stringr str_c
makeGenes <- function(cellType, data2, chain1, chain2) {
if(cellType %in% c("T-AB", "T-GD")) {
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1,
str_c(v_gene,  j_gene, c_gene, sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2,
str_c(v_gene, d_gene,  j_gene,  c_gene, sep = "."), NA))
}
else {
data2 <- data2 %>%
mutate(IGKct = ifelse(chain == "IGK",
str_c(v_gene,  j_gene, c_gene, sep = "."), NA)) %>%
mutate(IGLct = ifelse(chain == "IGL",
str_c(v_gene,  j_gene, c_gene, sep = "."), NA)) %>%
mutate(IGHct = ifelse(chain == "IGH",
str_c(v_gene, d_gene,  j_gene,  c_gene, sep = "."), NA))
}
return(data2)
}
data2 <- out[[i]]
data2 <- makeGenes(cellType, data2, chain1, chain2)
devtools::check()
setwd("~/Documents/scRepertoire")
setwd("~/Documents/GitHub/scRepertoire")
devtools::check()
devtools::check()
plot(combined[[1]]$CTgene, combined[[2]]$CTgene)
plot(combined[[1]]$CTgene)
unique(combined[[1]]$CTgene)
combined <- combineTCR(contig_list,
samples = c("t", "s"),
ID = c("1", "2"),
filterMulti = TRUE, cells ="T-AB")
unique(combined[[1]]$CTgene)
unique(combined[[2]]$CTgene)
length(unique(combined[[2]]$CTgene))
length(unique(combined[[2]]$CTnt)
)
length(unique(combined[[2]]$CTstrict)
)
length(unique(combined[[1]]$CTstrict))
length(unique(combined[[1]]$CTgene))
table(data2$barcode)
which(table(data2$barcode) > 2)
which(table(contig_list[[1]]$barcode) > 2)
which(table(contig_list[[1]]$barcode) > 3)
View(x)
x <- contig_list[[1]]
View(contig_list)
View(combined)
y <- combined[[1]]
View(y)
head(x)
install.packages("hdf5r")
library(Seurat)
seurat <- Read10X_h5("~/Documents/filtered_feature_bc_matrix.h5")
View(seurat)
seurat <- CreateSeuratObject(counts = seurat, project = "sara", min.cells = 3, min.features = 200)
tmp <- Read10X_h5("~/Documents/filtered_feature_bc_matrix.h5")
seuratObj <- CreateSeuratObject(counts = tmp$`Gene Expression`, project = "test", min.cells = 3, min.features = 200)
adt_assay <- CreateAssayObject(counts = tmp$`Antibody Capture`)
# add this assay to the previously created Seurat object
seuratObj[["ADT"]] <- adt_assay
dim(adt_assay)
dim(seuratObj)
head(seuratObj[[]])
seuratObj <- CreateSeuratObject(counts = tmp$`Gene Expression`, project = "test")
adt_assay <- CreateAssayObject(counts = tmp$`Antibody Capture`)
# add this assay to the previously created Seurat object
seuratObj[["ADT"]] <- adt_assay
head(seuratObj[[]])
contig <- read.csv("~/Documents/filtered_contig_annotations.csv")
combined <- combineBCR(contig, samples = "S1")
devtools::install_github("ncborcherding/scRepertoire@dev")
library(scRepertoire)
combined <- combineBCR(contig, samples = "S1")
i <- 1
head(combined[[i]]$barcode)
for(i in seq_along(combined)) {
combined[[i]]$barcode <- stringr::str_split(combined[[i]]$barcode, "_", simplify = TRUE)[,2]
}
seuratObj <- combineExpression(combined, seuratObj)
head(seuratObj[[]])
dat <- read.delim("GSE120575_Sade_Feldman_melanoma_single_cells_TPM_GEO.txt")
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(scDblFinder))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(RColorBrewer))
file_list <- list.files("./data/SequencingRuns")
dir.create("./qc")
file_list <- list.files("./data/SequencingRuns")
list <- NULL
for (i in seq_along(file_list)){
tmp <-  Read10X(paste0("./data/SequencingRuns/", file_list[i]))
##Several data sets do not have the MT in front of the mitochondria genes
mito <- c("ATP8", "ATP6", "CO1", "CO2", "CO3", "CYB", "ND1", "ND2", "ND3", "ND4L", "ND4", "ND5", "ND6", "RNR2", "TA", "TR", "TN", "TD", "TC", "TE", "TQ", "TG", "TH", "TI", "TL1", "TL2", "TK", "TM", "TF", "TP", "TS1", "TS2", "TT", "TW", "TY", "TV", "RNR1")
x <- which(rownames(tmp) %in% mito)
if (length(x) > 0) {
y <- rownames(tmp)[x]
y<- paste0("MT-", y)
rownames(tmp)[x] <- y
}
tmp <- CreateSeuratObject(counts = tmp)
tmp <- subset(tmp, subset = nFeature_RNA > 100) #filter out low count/feature cells
tmp  <- RenameCells(object = tmp , new.names = paste0(file_list[i], "_", rownames(tmp[[]])))
tmp[["mito.genes"]] <- PercentageFeatureSet(tmp, pattern = "^MT-")
if (i == 1) {
list <- tmp
} else {
list <- merge(x=list, y=tmp)
}
rm(tmp)
}
dir.create("./qc")
file_list <- list.files("./data/SequencingRuns")
list <- NULL
for (i in seq_along(file_list)){
tmp <-  Read10X(paste0("./data/SequencingRuns/", file_list[i]))
##Several data sets do not have the MT in front of the mitochondria genes
mito <- c("ATP8", "ATP6", "CO1", "CO2", "CO3", "CYB", "ND1", "ND2", "ND3", "ND4L", "ND4", "ND5", "ND6", "RNR2", "TA", "TR", "TN", "TD", "TC", "TE", "TQ", "TG", "TH", "TI", "TL1", "TL2", "TK", "TM", "TF", "TP", "TS1", "TS2", "TT", "TW", "TY", "TV", "RNR1")
x <- which(rownames(tmp) %in% mito)
if (length(x) > 0) {
y <- rownames(tmp)[x]
y<- paste0("MT-", y)
rownames(tmp)[x] <- y
}
tmp <- CreateSeuratObject(counts = tmp)
tmp <- subset(tmp, subset = nFeature_RNA > 100) #filter out low count/feature cells
tmp  <- RenameCells(object = tmp , new.names = paste0(file_list[i], "_", rownames(tmp[[]])))
tmp[["mito.genes"]] <- PercentageFeatureSet(tmp, pattern = "^MT-")
if (i == 1) {
list <- tmp
} else {
list <- merge(x=list, y=tmp)
}
rm(tmp)
}
saveRDS(list, file = "./data/GSE139555.rds")
colorblind_vector <- colorRampPalette(viridis_pal(option = "B")(7))
suppressPackageStartupMessages(library(Seurat))
file_list <- list.files("./data/SequencingRuns")
i <- 1
tmp <-  Read10X(paste0("./data/SequencingRuns/", file_list[i]))
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(scDblFinder))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(RColorBrewer))
dir.create("./qc")
file_list <- list.files("./data/SequencingRuns")
list <- NULL
for (i in seq_along(file_list)){
tmp <-  Read10X(paste0("./data/SequencingRuns/", file_list[i]))
##Several data sets do not have the MT in front of the mitochondria genes
mito <- c("ATP8", "ATP6", "CO1", "CO2", "CO3", "CYB", "ND1", "ND2", "ND3", "ND4L", "ND4", "ND5", "ND6", "RNR2", "TA", "TR", "TN", "TD", "TC", "TE", "TQ", "TG", "TH", "TI", "TL1", "TL2", "TK", "TM", "TF", "TP", "TS1", "TS2", "TT", "TW", "TY", "TV", "RNR1")
x <- which(rownames(tmp) %in% mito)
if (length(x) > 0) {
y <- rownames(tmp)[x]
y<- paste0("MT-", y)
rownames(tmp)[x] <- y
}
tmp <- CreateSeuratObject(counts = tmp)
tmp <- subset(tmp, subset = nFeature_RNA > 100) #filter out low count/feature cells
tmp  <- RenameCells(object = tmp , new.names = paste0(file_list[i], "_", rownames(tmp[[]])))
tmp[["mito.genes"]] <- PercentageFeatureSet(tmp, pattern = "^MT-")
if (i == 1) {
list <- tmp
} else {
list <- merge(x=list, y=tmp)
}
rm(tmp)
}
saveRDS(list, file = "./data/GSE154826.rds")
