t50 <- range/2 + test[1,2]
t50 <- t50[,1]
out <- predict(fit2, x = t50)[,2]
ggplot(data = Liver, aes(Condition, Liver[,metabolites[x]])) +
geom_point() +
#geom_smooth(method = "smooth.spline2") +
ylab(metabolites[x]) +
xlab("Time") +
geom_hline(yintercept = as.numeric(t50), lty=2) +
geom_vline(xintercept = out, lty=2) +
theme_classic()
test <- Liver[,c("Condition", metabolites[x])] %>%
group_by(Condition) %>%
summarize_all(funs(mean))
trend <- max(test[,2]) - test[1,2]
if (trend[,1] > 0) {
range <- max(test[,2]) -  test[1,2]
} else{
range <- min(test[,2]) - test[1,2]
}
FC <- log(test[5,2]/test[1,2], 2)
t50 <- range/2 + test[1,2]
t50 <- t50[,1]
out <- predict(fit2, x = t50)[,2]
out
trend
trend > 0
View(mat)
range/2
if (trend > 0) {
range <- max(test[,2]) +  test[1,2]
} else{
range <- min(test[,2]) - test[1,2]
}
range
max(test[,2])
test[1,2]
View(test)
range <- max(test[,2]) -  test[1,2]
if (trend > 0) {
range <- max(test[,2]) -  test[1,2]
} else{
range <- min(test[,2]) + test[1,2]
}
t50 <- range/2 + test[1,2]
View(t50)
out <- predict(fit2, x = t50)[,2]
rate <- out/10
GCV <- fit2$cv.crit
deg <- fit2$df
spar <- fit2$spar
pen <- fit2$pen.crit
ratio <- fit2$ratio
metabolites[x]
for (x in seq_along(metabolites)){
test <- Liver[,c("Condition", metabolites[x])] %>%
group_by(Condition) %>%
summarize_all(funs(mean))
trend <- max(test[,2]) - test[1,2]
if (trend[,1] > 0) {
range <- max(test[,2]) -  test[1,2]
} else{
range <- min(test[,2]) - test[1,2]
}
FC <- log(test[5,2]/test[1,2], 2)
t50 <- range/2 + test[1,2]
t50 <- t50[,1]
out <- predict(fit2, x = t50)[,2]
if (trend > 0) {
range <- max(test[,2]) -  test[1,2]
} else{
range <- min(test[,2]) + test[1,2]
}
t50 <- range/2 + test[1,2]
out <- predict(fit2, x = t50)[,2]
rate <- out/10
GCV <- fit2$cv.crit
deg <- fit2$df
spar <- fit2$spar
pen <- fit2$pen.crit
ratio <- fit2$ratio
lambda <- fit2$lambda
output <- c(T50 = out, M50 = t50[,1], rate = rate, range = range[,1], FC = FC[,1], GCV = GCV, degF = deg, spar = spar, pen.crit = pen, ratio = ratio, lambda = lambda)
output <- as.data.frame(output)
if (x == 1) {
mat <- t(output)
} else {
mat <- rbind(mat, t(output))
}
}
rownames(mat) <- metabolites
View(mat)
write.csv(mat,"Liver_fittedValues.csv")
#mat <- read.csv("Liver_fittedValues.csv", row.names = 1)
dir.create("output/urchin")
for (i in 1:length(pathways)){
mat <- as.data.frame(mat)
plot <- mat[rownames(mat) %in% pathways[[i]],]
plot <- subset(plot, T50 > 0 & T50 < 10)
plot$names <- rownames(plot)
g <- ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
ggsave(paste0("output/urchin/", names(pathways)[i], "_Urchin.pdf"), g, height=4, width=5)
}
i <- 5
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
plot <- mat[rownames(mat) %in% pathways[[i]],]
plot <- subset(plot, T50 > 0 & T50 < 10)
plot$names <- rownames(plot)
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
View(plot)
g <- ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-4,4), breaks=c(-4,-3,-2,-1,1,2,3,4))
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-4,4), breaks=c(-4,-3,-2,-1,1,2,3,4))
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7))
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7))
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7))
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-4,4), breaks=c(-4,-3,-2,-1,1,2,3,4))
for (i in 1:length(pathways)){
mat <- as.data.frame(mat)
plot <- mat[rownames(mat) %in% pathways[[i]],]
plot <- subset(plot, T50 > 0 & T50 < 10)
plot$names <- rownames(plot)
g <- ggplot(plot, aes(x=-scale(T50), y=FC, group = "names")) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
geom_text_repel(data=plot, aes(label=paste(names))) +
theme_classic() +
theme(line = element_blank()) +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7,8)) +
scale_x_continuous(limits=c(-4,4), breaks=c(-4,-3,-2,-1,1,2,3,4))
ggsave(paste0("output/urchin/", names(pathways)[i], "_Urchin.pdf"), g, height=4, width=5)
}
ggplot(mat, aes(x=-scale(T50), y=FC)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
theme_classic() +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
ggsave("output/urchin/overall_Urchin.pdf", height=4, width=5)
mat$names <- rownames(mat)
ggplot(mat, aes(x=-scale(T50), y=FC)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_text(aes(label = names), size = 2) +
theme_classic() +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,6), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
ggplot(mat, aes(x=-scale(T50), y=FC)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_label(aes(label = names, x=(-scale(T50))/3, y=FC/3), size = 2) +
theme_classic() +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,7), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
ggsave("output/urchin/overall_Urchin_labeled.pdf", height=100, width=100, limitsize = FALSE)
ggplot(mat, aes(x=-scale(T50), y=FC)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_point() +
theme_classic() +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7,8)) +
scale_x_continuous(limits=c(-4,4), breaks=c(-4,-3,-2,-1,1,2,3,4))
ggsave("output/urchin/overall_Urchin.pdf", height=4, width=5)
mat$names <- rownames(mat)
ggplot(mat, aes(x=-scale(T50), y=FC)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_text(aes(label = names), size = 2) +
theme_classic() +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,9)) +
scale_x_continuous(limits=c(-3,3), breaks=c(-3,-2,-1,1,2,3))
ggplot(mat, aes(x=-scale(T50), y=FC)) +
geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
geom_segment(aes(xend=-scale(T50), yend=FC, x=0, y=0)) +
geom_label(aes(label = names, x=(-scale(T50))/3, y=FC/3), size = 2) +
theme_classic() +
labs(x = "t50 (Z-score)", y="Metabolite Fold-change")  +
scale_y_continuous(limits=c(-3,8), breaks = c(-4,-3,-2,-1,1,2,3,4,5,6,7,8)) +
scale_x_continuous(limits=c(-4,4), breaks=c(-4,-3,-2,-1,1,2,3,4))
ggsave("output/urchin/overall_Urchin_labeled.pdf", height=100, width=100, limitsize = FALSE)
data2 <- as.data.frame(Liver)
for (i in 3:length(data2)) {
data2[,i] <- log(data2[,i]/mean(data2[1:5,i]),2)
}
melted <- reshape2::melt(data2[,2:ncol(data2)], id.vars = "Condition")
melted$value <- abs(melted$value)
melted2 <- melted %>%
group_by(Condition, variable) %>%
summarise(mean1 = median(value, na.rm = T))
lower_ci <- function(mean, se, n, conf_level = 0.95){
lower_ci <- mean - qt(1 - ((1 - conf_level) / 2), n - 1) * se
}
upper_ci <- function(mean, se, n, conf_level = 0.95){
upper_ci <- mean + qt(1 - ((1 - conf_level) / 2), n - 1) * se
}
CI <- melted2 %>%
group_by(Condition) %>%
summarise(smean = mean(mean1, na.rm = TRUE),
ssd = sd(mean1, na.rm = TRUE),
count = n()) %>%
mutate(se = ssd / sqrt(count),
lower_ci = lower_ci(smean, se, count),
upper_ci = upper_ci(smean, se, count))
ggplot(aes(x=Condition, y=mean1), data = melted2) +
# geom_boxplot(aes(group=Condition), outlier.alpha = 0) +
geom_errorbar(data = CI,
aes(x = Condition, y= smean, ymin = lower_ci, ymax = upper_ci)) +
geom_smooth(method = lm,
formula = y ~ splines::bs(x, df = 2, degree = 2, knots = 10), color = "red") +
ylab("Abs(Log2-fold Change)") +
theme_classic() +
theme(axis.title.x = element_blank())
ggsave("./output/globalKinetics_Liver.pdf", height=3, width = 4)
x <- ss(CI$smean, CI$Condition, all.knots = TRUE)
y <- splines::bs(CI$smean, CI$Condition, df = 2, degree = 2, knots = 10)
y <- smooth.spline(CI$smean, CI$Condition)
df <- read.csv("~/Documents/all_contig_annotations.csv")
samples = "Sample1"
ID = NULL
threshold = 0.85
#Ensure df is in list format
checkList <- function(df) {
df <- if(is(df)[1] != "list") list(df) else df
return(df)
}
df <- checkList(df)
out <- NULL
final <- list()
chain1 <- "heavy"
chain2 <- "light"
for (i in seq_along(df)) {
df[[i]] <- subset(df[[i]], chain %in% c("IGH", "IGK", "IGL"))
df[[i]] <- subset(df[[i]], productive %in% c(TRUE, "TRUE", "True", "true"))
if (nrow(df[[i]]) == 0) { stop(
"There are 0 contigs after internal filtering -
check the contig list to see if any issues exist
for productive chains", call. = FALSE) }
df[[i]] <- df[[i]] %>% group_by(barcode,chain) %>% top_n(n=1,wt=reads)
df[[i]]$sample <- samples[i]
df[[i]]$ID <- ID[i]
df[[i]] <- filteringMulti(df[[i]]) }
#This is to add the sample and ID prefixes for combineBCR()/TCR()
modifyBarcodes <- function(df, samples, ID) {
out <- NULL
for (x in seq_along(df)) {
data <- df[[x]]
if (!is.null(ID)){
data$barcode <- paste0(samples[x], "_", ID[x], "_", data$barcode)
} else {
data$barcode <- paste0(samples[x], "_", data$barcode)
}
out[[x]] <- data }
return(out)
}
if (!is.null(samples)) {
out <- modifyBarcodes(df, samples, ID)
} else {
out <- df
}
#Sorting the V/D/J/C gene sequences for T and B cells
#' @importFrom stringr str_c
makeGenes <- function(cellType, data2, chain1, chain2) {
if(cellType %in% c("T-AB", "T-GD")) {
data2 <- data2 %>%
mutate(TCR1 = ifelse(chain == chain1,
str_c(na.omit(v_gene),  na.omit(j_gene), na.omit(c_gene), sep = "."), NA)) %>%
mutate(TCR2 = ifelse(chain == chain2,
str_c(na.omit(v_gene), na.omit(d_gene),  na.omit(j_gene),  na.omit(c_gene), sep = "."), NA))
}
else {
data2 <- data2 %>%
mutate(IGKct = ifelse(chain == "IGK",
str_c(na.omit(v_gene),  na.omit(j_gene), na.omit(c_gene), sep = "."), NA)) %>%
mutate(IGLct = ifelse(chain == "IGL",
str_c(na.omit(v_gene),  na.omit(j_gene), na.omit(c_gene), sep = "."), NA)) %>%
mutate(IGHct = ifelse(chain == "IGH",
str_c(na.omit(v_gene), na.omit(d_gene),  na.omit(j_gene),  na.omit(c_gene), sep = "."), NA))
}
return(data2)
}
data2 <- data.frame(out[[i]])
data2 <- makeGenes(cellType = "B", data2)
unique_df <- unique(data2$barcode)
Con.df <- data.frame(matrix(NA, length(unique_df), 9))
colnames(Con.df) <- c("barcode", heavy_lines, light_lines)
Con.df$barcode <- unique_df
#Assigning positions for BCR contig data
#Now assumes lambda over kappa in the context of only 2 light chains
#' @author Gloria Kraus, Nick Bormann, Nick Borcherding
parseBCR <- function (Con.df, unique_df, data2) {
for (y in seq_along(unique_df)) {
barcode.i <- Con.df$barcode[y]
location.i <- which(barcode.i == data2$barcode)
if (length(location.i) == 2) {
if (!is.na(data2[location.i[1], c("IGHct")])) {
Con.df[y, heavy_lines] <- data2[location.i[1], h_lines]
if(is.na(data2[location.i[2], c("IGHct")])) {
if (!is.na(data2[location.i[2], c("IGLct")])) {
Con.df[y, light_lines] <- data2[location.i[2], l_lines]
} else if(!is.na(data2[location.i[2], c("IGKct")])) {
Con.df[y, light_lines] <- data2[location.i[2], l_lines]
}
}
} else if (!is.na(data2[location.i[2], c("IGHct")])) {
Con.df[y, heavy_lines] <- data2[location.i[2], h_lines]
if(is.na(data2[location.i[1], c("IGHct")])) {
if (!is.na(data2[location.i[1], c("IGLct")])) {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
} else if(!is.na(data2[location.i[1], c("IGKct")])) {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
}
}
}
}else if (length(location.i) == 1) {
chain.i <- data2$chain[location.i]
if (chain.i == "IGH") {
Con.df[y, heavy_lines] <- data2[location.i[1], h_lines]
}
else if (chain.i == "IGL") {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
}
else {
Con.df[y, light_lines] <- data2[location.i[1], k_lines]
}
}
}
return(Con.df)
}
Con.df <- parseBCR(Con.df, unique_df, data2)
View(Con.df)
View(data2)
View(data2)
table(Con.df$IGLC, Con.df$vgene2, useNA = "ifany")
x <- as.data.frame(table(Con.df$IGLC, Con.df$vgene2, useNA = "ifany"))
View(x)
Con.df <- data.frame(matrix(NA, length(unique_df), 9))
colnames(Con.df) <- c("barcode", heavy_lines, light_lines)
Con.df$barcode <- unique_df
which(Con.df$barcode == "Sample1_AAAGCAACAGACAAAT-1")
y <- 29
barcode.i <- Con.df$barcode[y]
location.i <- which(barcode.i == data2$barcode)
!is.na(data2[location.i[1], c("IGHct")])
!is.na(data2[location.i[2], c("IGLct")])
!is.na(data2[location.i[2], c("IGKct")])
#Assigning positions for BCR contig data
#Now assumes lambda over kappa in the context of only 2 light chains
#' @author Gloria Kraus, Nick Bormann, Nick Borcherding
parseBCR <- function (Con.df, unique_df, data2) {
for (y in seq_along(unique_df)) {
barcode.i <- Con.df$barcode[y]
location.i <- which(barcode.i == data2$barcode)
if (length(location.i) == 2) {
if (!is.na(data2[location.i[1], c("IGHct")])) {
Con.df[y, heavy_lines] <- data2[location.i[1], h_lines]
if(is.na(data2[location.i[2], c("IGHct")])) {
if (!is.na(data2[location.i[2], c("IGLct")])) {
Con.df[y, light_lines] <- data2[location.i[2], l_lines]
} else if(!is.na(data2[location.i[2], c("IGKct")])) {
Con.df[y, light_lines] <- data2[location.i[2], k_lines]
}
}
} else if (!is.na(data2[location.i[2], c("IGHct")])) {
Con.df[y, heavy_lines] <- data2[location.i[2], h_lines]
if(is.na(data2[location.i[1], c("IGHct")])) {
if (!is.na(data2[location.i[1], c("IGLct")])) {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
} else if(!is.na(data2[location.i[1], c("IGKct")])) {
Con.df[y, light_lines] <- data2[location.i[1], k_lines]
}
}
}
}else if (length(location.i) == 1) {
chain.i <- data2$chain[location.i]
if (chain.i == "IGH") {
Con.df[y, heavy_lines] <- data2[location.i[1], h_lines]
}
else if (chain.i == "IGL") {
Con.df[y, light_lines] <- data2[location.i[1], l_lines]
}
else {
Con.df[y, light_lines] <- data2[location.i[1], k_lines]
}
}
}
return(Con.df)
}
Con.df <- data.frame(matrix(NA, length(unique_df), 9))
colnames(Con.df) <- c("barcode", heavy_lines, light_lines)
Con.df$barcode <- unique_df
Con.df <- parseBCR(Con.df, unique_df, data2)
