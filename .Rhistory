df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list(df[[]])
}
}
split.by = NULL
df <- seurat
if (!is.null(split.by)) {
df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list(df[[]])
}
}
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
bg <- NULL
clones <-  table(df[[s]][,cloneCall])
names(df)
df <- list("Object" = df[[]])
df <- seurat
if (!is.null(split.by)) {
df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list("Object" = df[[]])
}
}
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
bg <- NULL
for (s in names(df)) {
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
if (length(clones)>0) {
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
bg <- cbind(bg,table(expanded) / sum(table(expanded)))
}
}
colnames(bg) <- names(df)
View(bg)
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
clones
df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
names(df)
s <- names(df)
for (s in names(df)) {
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
if (length(clones)>0) {
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
bg <- cbind(bg,table(expanded) / sum(table(expanded)))
}
}
bg <- NULL
for (s in names(df)) {
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
if (length(clones)>0) {
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
bg <- cbind(bg,table(expanded) / sum(table(expanded)))
}
}
colnames(bg) <- names(df)
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
which(df[[s]][,cloneCall] %in% names(clones))
df[[s]]
df
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
df[[s]]
s <- 1
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
df[[s]]
View(df)
DF
df
df[[1]]
View(df_shuffle)
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
head(df[[s]])
df <- Seurat
df <- seurat
df <- expression2List(df)
df <- list("Object" = grabMeta(df))
#This is to grab the meta data from a seurat or SCE object
#' @importFrom SingleCellExperiment colData
grabMeta <- function(sc) {
if (inherits(x=sc, what ="Seurat")) {
meta <- data.frame(sc[[]], slot(sc, "active.ident"))
if ("cluster" %in% colnames(meta)) {
colnames(meta)[length(meta)] <- "cluster.active.ident"
} else {
colnames(meta)[length(meta)] <- "cluster"
}
}
else if (inherits(x=sc, what ="SummarizedExperiment")){
meta <- data.frame(colData(sc))
rownames(meta) <- sc@colData@rownames
clu <- which(colnames(meta) == "ident")
if ("cluster" %in% colnames(meta)) {
colnames(meta)[clu] <- "cluster.active.idents"
} else {
colnames(meta)[clu] <- "cluster"
}
}
return(meta)
}
df <- list("Object" = grabMeta(df))
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
get_clono_bg <- function(df,
split.by="Sample",
group.by="cluster",
cloneCall="CTaa",
min.expand=10) {
if (!is.null(split.by)) {
df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list("Object" = grabMeta(df))
}
}
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
bg <- NULL
for (s in seq_alongdf)) {
View(df)
get_clono_bg <- function(df,
split.by="Sample",
group.by="cluster",
cloneCall="CTaa",
min.expand=10) {
if (!is.null(split.by)) {
df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list("Object" = grabMeta(df))
}
}
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
bg <- NULL
for (s in seq_along(df)) {
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
if (length(clones)>0) {
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), group.by]
bg <- cbind(bg,table(expanded) / sum(table(expanded)))
}
}
colnames(bg) <- names(df)
return(bg)
}
bg <- get_clono_bg(seurat, split.by=NULL, group.by ="seurat_clusters", min.expand = 10)
x <- get_clono_bias(seurat, split.by = "Patient", group.by ="seurat_clusters", min.expand=10)
View(x)
for (ii in c(1:n.rep)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat, group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle.list <- list()
for (ii in c(1:n.rep)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat, group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
df_shuffle.list <- list()
for (ii in c(1:n.rep)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
x <- get_clono_bias(seurat, group.by ="seurat_clusters", min.expand=10)
View(df_shuffle.list)
x <- get_clono_bias(seurat, group.by ="seurat_clusters", min.expand=10)
bg <- get_clono_bg(seurat, split.by=NULL, group.by ="seurat_clusters", min.expand = 10)
dat <- data.frame(Sample=character(),
Clone_i=character(),
Clone=character(),
ncells=integer(),
Top_state=character(),
freq=double(),
freq_diff=double(),
bias=double()
)
bg = NULL
bg <- get_clono_bg(df, split.by=split.by, min.expand = min.expand, group.by = group.by, cloneCall = cloneCall)
get_clono_bias <- function(df, bg=NULL, split.by=NULL, group.by="seurat_cluster", cloneCall="aa", min.expand=10,
do.shuffle=FALSE, seed=123) {
dat <- data.frame(Sample=character(),
Clone_i=character(),
Clone=character(),
ncells=integer(),
Top_state=character(),
freq=double(),
freq_diff=double(),
bias=double()
)
if (is.null(bg)) {
bg <- get_clono_bg(df, split.by=split.by, min.expand = min.expand, group.by = group.by, cloneCall = cloneCall)
}
if (!is.null(split.by)) {
df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list("Object" = grabMeta(df))
}
}
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
for (s in colnames(bg)) {
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
if (length(clones)>0) {
clones <- sort(clones, decreasing = T)
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), c(group.by, cloneCall)]
if (do.shuffle) {  #reshuffle annotation column
set.seed(seed)
expanded[[group.by]] <- sample(expanded[[group.by]])
}
for (i in seq_along(clones)) {
this <- names(clones)[i]
this.s <- paste0(this, "_", s)
ncells <- clones[i]
sub <- expanded[which(expanded[, cloneCall] == this), group.by]
comp <- table(sub) / sum(table(sub))
diff <- comp - bg[,s]
diff_norm <- round((comp - bg[,s])/(1-bg[,s]), 3)
top_state <- names(which.max(diff_norm))[1]
new_row <- c(s, this.s, this, as.integer(ncells), top_state,
as.double(comp[top_state]),
as.double(diff[top_state]),
as.double(diff_norm[top_state]))
dat[nrow(dat) + 1,] = new_row
}
}
}
dat$ncells <- as.numeric(dat$ncells)
dat$freq <- as.double(dat$freq)
dat$freq_diff <- as.double(dat$freq_diff)
dat$bias <- as.double(dat$bias)
return(dat)
}
x <- get_clono_bias(seurat, group.by ="seurat_clusters", min.expand=10)
View(x)
x <- get_clono_bias(seurat, split.by = "Patient", group.by ="seurat_clusters", min.expand=10)
df_shuffle <- Reduce(rbind, df_shuffle.list)
split.by="Patient"
object <- screp_example
meta.column="seurat_clusters"
clono.column="CTaa"
bias <- get_clono_bias(seurat, split.by = "Patient", group.by ="seurat_clusters", min.expand=10)
df_shuffle.list <- list()
for (ii in c(1:n.rep)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle <- Reduce(rbind, df_shuffle.list)
corrected_p <- 1-(0.05/nrow(bias))
lambda <- 3
ggplot(bias, aes(x=ncells,y=bias)) + geom_point(aes(colour=Top_state)) + stat_quantile(data=df_shuffle, quantiles = c(corrected_p),method = "rqss", lambda=lambda)
df_shuffle.list <- list()
for (ii in seq_along(n.boots)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle <- Reduce(rbind, df_shuffle.list)
corrected_p <- 1-(0.05/nrow(bias))
lambda <- 3
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
stat_quantile(data=df_shuffle, quantiles = c(corrected_p),method = "rqss", lambda=lambda) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=lambda) +
theme_classic()
for (ii in seq_along(n.boots)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle.list <- list()
n.boots = 20
for (ii in seq_along(n.boots)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle.list <- list()
for (ii in seq_len(n.boots)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = "Patient", group.by ="seurat_clusters", min.expand=10, do.shuffle = T, seed=ii)
}
df_shuffle <- Reduce(rbind, df_shuffle.list)
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=lambda) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) + geom_point(aes(colour=as.factor(Top_state))) + stat_quantile(data=df_shuffle, quantiles = c(corrected_p),method = "rqss", lambda=lambda)
ggplot(bias, aes(x=ncells,y=bias)) + geom_point(aes(colour=as.factor(Top_state))) + stat_quantile(data=df_shuffle, quantiles = c(corrected_p),method = "rqss", lambda=lambda)
unique(bias$Top_state)
sort(unique(bias$Top_state))
sort(as.numeric(unique(bias$Top_state)))
inhertics(bias$Top_state)
inherits(bias$Top_state)
inherits(bias$Top_state, numeric)
class(bias$Top_state)
sort(as.numeric(unique(bias$Top_state)))
sort(unique(bias$Top_state))
order(unique(bias$Top_state))
unique(bias$Top_state)
bias$Top_state <- factor(str_sort(bias$Top_state, numeric = TRUE))
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3) +
theme_classic()
bias$Top_state <- factor(bias$Top_state, str_sort(bias$Top_state, numeric = TRUE))
bias$Top_state
bias <- get_clono_bias(seurat, split.by = "Patient",
group.by ="seurat_clusters", min.expand=10)
bias$Top_state <- factor(bias$Top_state, str_sort(bias$Top_state, numeric = TRUE))
bias$Top_state <- factor(bias$Top_state, str_sort(unique(bias$Top_state)))
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
suppressWarnings(stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
suppressMessages(stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
# This suppressing outputs for using dput()
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, formula = y ~ qss(x, lambda = 3), quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, formula = y ~ qss(x, lambda = 3), quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, formula = y ~ rqss(x, lambda = 3), quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
plot <- ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic()
suppressMessages(plot)
suppressWarnings(plot)
quiet(plot)
quiet(plot)
quiet(plot)
suppressMessages(plot)
bias$Top_state <- factor(bias$Top_state, str_sort(unique(bias$Top_state), numeric = TRUE))
plot <- ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic() +
xlab("Clone Size") +
ylab("Clonotype Bias")
plot
class(bias$Top_state)
bias <- get_clono_bias(seurat, split.by = split.by,
group.by = group.by , min.expand=min.expand)
get_clono_bias <- function(df,
split.by=NULL,
group.by=NULL,
cloneCall=cloneCall,
min.expand=10,
do.shuffle=FALSE,
seed=123) {
dat <- data.frame(Sample=character(),
Clone_i=character(),
Clone=character(),
ncells=integer(),
Top_state=double(),
freq=double(),
freq_diff=double(),
bias=double()
)
bg <- get_clono_bg(df, split.by=split.by, min.expand = min.expand, group.by = group.by, cloneCall = cloneCall)
if (!is.null(split.by)) {
df <- list.input.return(df, split.by)
} else {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
df <- list("Object" = grabMeta(df))
}
}
cloneCall <- theCall(cloneCall)
df <- checkBlanks(df, cloneCall)
for (s in colnames(bg)) {
clones <-  table(df[[s]][,cloneCall])
clones <- clones[clones>=min.expand]
if (length(clones)>0) {
clones <- sort(clones, decreasing = T)
expanded <- df[[s]][which(df[[s]][,cloneCall] %in% names(clones)), c(group.by, cloneCall)]
if (do.shuffle) {  #reshuffle annotation column
set.seed(seed)
expanded[[group.by]] <- sample(expanded[[group.by]])
}
for (i in seq_along(clones)) {
this <- names(clones)[i]
this.s <- paste0(this, "_", s)
ncells <- clones[i]
sub <- expanded[which(expanded[, cloneCall] == this), group.by]
comp <- table(sub) / sum(table(sub))
diff <- comp - bg[,s]
diff_norm <- round((comp - bg[,s])/(1-bg[,s]), 3)
top_state <- names(which.max(diff_norm))[1]
new_row <- c(s, this.s, this, as.integer(ncells), top_state,
as.double(comp[top_state]),
as.double(diff[top_state]),
as.double(diff_norm[top_state]))
dat[nrow(dat) + 1,] = new_row
}
}
}
dat$ncells <- as.numeric(dat$ncells)
dat$freq <- as.double(dat$freq)
dat$freq_diff <- as.double(dat$freq_diff)
dat$bias <- as.double(dat$bias)
return(dat)
}
bias <- get_clono_bias(seurat, split.by = split.by,
group.by = group.by , min.expand=min.expand)
bias <- get_clono_bias(seurat, split.by = split.by,
group.by = group.by , min.expand=min.expand)
bias <- get_clono_bias(seurat, split.by = split.by,
group.by = group.by , cloneCall=cloneCall, min.expand=min.expand)
df_shuffle.list <- list()
for (ii in seq_len(n.boots)) {
df_shuffle.list[[ii]] <- get_clono_bias(seurat,split.by = split.by,
group.by = group.by, cloneCall=cloneCall, min.expand=min.expand, do.shuffle = T, seed=ii)
}
df_shuffle <- Reduce(rbind, df_shuffle.list)
corrected_p <- 1-(0.05/nrow(bias))
unique(bias$Top_state)
class(bias$Top_state)
bias$Top_state <- factor(bias$Top_state, str_sort(unique(bias$Top_state), numeric = TRUE))
plot <- ggplot(bias, aes(x=ncells,y=bias)) +
geom_point(aes(colour=Top_state)) +
quiet(stat_quantile(data=df_shuffle, quantiles = c(corrected_p), method = "rqss", lambda=3)) +
theme_classic() +
xlab("Clone Size") +
ylab("Clonotype Bias")
plot
clonalDiversity(seurat, cloneCall = "nt")
df <- list.input.return(df)
clonalDiversity(seurat, cloneCall = "nt")
split.by = "NULL"
setwd("~/Documents/GitHub/scRepertoire")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
install.packages("magick")
suppressMessages(library(scRepertoire))
combined <- combineTCR(contig_list,
samples = c("PY", "PY", "PX", "PX", "PZ","PZ"),
ID = c("P", "T", "P", "T", "P", "T"), cells ="T-AB")
seurat <- get(load("~/seurat2.rda"))
seurat <- combineExpression(combined, seurat,
cloneCall="gene", group.by = "sample", proportion = FALSE,
cloneTypes=c(Single=1, Small=5, Medium=20, Large=100, Hyperexpanded=500))
clonotypeBias(sce, cloneCall = "aa", split.by = "Patient", group.by = "cluster",
n.boots = 20, min.expand =10)
clonotypeBias(seurat, cloneCall = "aa", split.by = "Patient", group.by = "cluster",
n.boots = 20, min.expand =10)
devtools::check()
screp_example <- combineExpression(combined, screp_example, cloneCall="gene", group.by = "sample", proportion = FALSE, cloneTypes=c(Single=1, Small=5, Medium=20, Large=100, Hyperexpanded=500))
sce <- combineExpression(combined, sce, cloneCall = "gene", group.by = "sample")
clonotypeBias(screp_example, cloneCall = "aa", split.by = "Patient", group.by = "cluster",
n.boots = 20, min.expand =10)
clonotypeBias(screp_example, cloneCall = "aa", split.by = "Type", group.by = "cluster",
n.boots = 20, min.expand =10)
clonotypeBias(screp_example, cloneCall = "aa", split.by = "Type", group.by = "cluster",
n.boots = 20, min.expand =1)
devtools::document()
devtools::check()
devtools::install()
sub_combined <- clusterTCR(combined[[2]], chain = "TCRA",
sequence = "aa",
threshold = 0.85, group = NULL)
sub_combined <- clusterTCR(combined[[2]], chain = "TRA",
sequence = "aa",
threshold = 0.85, group = NULL)
counts_TCRAcluster <- table(sub_combined$TRA_cluster)
counts_TCRA<- table(sub_combined$cdr3_aa1)
sub_combined <- as.data.frame(sub_combined)
counts_TCRAcluster <- table(sub_combined$TRA_cluster)
counts_TCRA<- table(sub_combined$cdr3_aa1)
#Change in histogram range using clusters over exact amino acid sequence
plot(rev(sort(counts_TCRAcluster)), xaxt='n')
plot(rev(sort(counts_TCRA)), xaxt='n')
