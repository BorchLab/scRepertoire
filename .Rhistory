colorblind_vector <- colorRampPalette(c("#FF4B20", "#FFB433", "#C6FDEC", "#7AC5FF", "#0348A6"))
DimPlot(seurat, group.by = "Type") + NoLegend() +
scale_color_manual(values=colorblind_vector(2))
d
seurat@meta.data$cloneType <- factor(seurat@meta.data$cloneType, levels = c("Hyperexpanded (100 < X <= 500)", "Large (20 < X <= 100)", "Medium (5 < X <= 20)", "Small (1 < X <= 5)", "Single (0 < X <= 1)", NA))
DimPlot(seurat, group.by = "cloneType") +
scale_color_manual(values = c(rev(colorblind_vector(5))), na.value="grey")
View(seurat)
seurat@meta.data
View(contig_list)
data("contig_list") #the data built into scRepertoire
head(contig_list[[1]])
combined <- combineContigs(contig_list, samples = c("PY", "PY", "PX", "PX", "PZ","PZ"), ID = c("P", "T", "P", "T", "P", "T"), cells ="T-AB")
for (i in seq_along(contig_list)) {
contig_list[[i]] <- stripBarcode(contig_list[[i]], column = 1, connector = "_", num_connects = 3)
}
head(contig_list[[1]])
combined <- combineContigs(contig_list, samples = c("PY", "PY", "PX", "PX", "PZ","PZ"), ID = c("P", "T", "P", "T", "P", "T"), cells ="T-AB")
head(combined[[1]])
head(combined[[2]])
meta <- seurat@meta.data
View(meta)
meta %>%
group_by(orig.ident) %>%
summarise(n=is.na(CTaa))
seurat <- get(load("/Users/nick/seurat.rda"))
seurat@assays$RNA <- NULL
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P2", "PZ", x2)
x1 <- as.data.frame(t(data.frame(strsplit(x, paste("[_]", sep="")), stringsAsFactors = FALSE)), stringsAsFactors = FALSE)[3]
x1$V3 <- paste0()
seurat <- get(load("/Users/nick/seurat.rda"))
seurat@assays$RNA <- NULL
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P2", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
)
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P2", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA <- NULL
save(seurat, file="seurat2.rda")
View(meta)
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
head(seurat@meta.data)
save(seurat, file="seurat2.rda")
View(seurat)
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA <- NULL
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
save(seurat, file="seurat2.rda")
getwd()
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA <- NULL
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
save(seurat, file="seurat2.rda")
View(meta)
seurat@meta.data <- seurat@meta.data %>%
mutate(Patient2 = ifelse(Patient == "P1", "PY", ifelse(Patient == "P2", "PX", "PZ")))
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA <- NULL
seurat@meta.data <- seurat@meta.data %>%
mutate(Patient2 = ifelse(Patient == "P1", "PY", ifelse(Patient == "P2", "PX", "PZ")))
head(seurat@meta.data)
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
dim(seurat@meta.data)
colnames(seurat@meta.data)[7] <- "Patient"
head(seurat@meta.data)
save(seurat, file="seurat2.rda")
seurat <- get(load("/Users/nick/seurat2.rda"))
seurat <- get(load("/Users/nick/seurat2.rda"))
DimPlot(seurat, label = T) + NoLegend()
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA <- NULL
seurat@meta.data <- seurat@meta.data %>%
mutate(Patient2 = ifelse(Patient == "P1", "PY", ifelse(Patient == "P2", "PX", "PZ")))
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
colnames(seurat@meta.data)[7] <- "Patient"
DimPlot(seurat, label = T) + NoLegend()
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA <- NULL
DimPlot(seurat, label = T) + NoLegend()
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
DimPlot(seurat, label = T) + NoLegend()
seurat@assays$RNA <- NULL
DimPlot(seurat, label = T) + NoLegend()
seurat@meta.data <- seurat@meta.data %>%
mutate(Patient2 = ifelse(Patient == "P1", "PY", ifelse(Patient == "P2", "PX", "PZ")))
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
colnames(seurat@meta.data)[7] <- "Patient"
DimPlot(seurat, label = T) + NoLegend()
View(seurat)
View(seurat)
seurat <- get(load("/Users/nick/seurat.rda"))
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@assays$RNA@counts <- NULL
View(seurat)
DimPlot(seurat, label = T) + NoLegend()
seurat@meta.data <- seurat@meta.data %>%
mutate(Patient2 = ifelse(Patient == "P1", "PY", ifelse(Patient == "P2", "PX", "PZ")))
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
colnames(seurat@meta.data)[7] <- "Patient"
DimPlot(seurat, label = T) + NoLegend()
meta <- seurat@meta.data
meta <-  meta %>%
mutate(Patient2 = ifelse(Patient == "P1", "PY", ifelse(Patient == "P2", "PX", "PZ")))
View(meta)
meta <- seurat@meta.data
meta$names <- rownames(meta)
View(meta)
meta <- seurat@meta.data
View(seurat)
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
head(seurat@meta.data)
seurat <- get(load("/Users/nick/seurat.rda"))
seurat@meta.data$Patient <- gsub("P1", "PY", seurat@meta.data$Patient)
head(seurat@meta.data)
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@meta.data$Patient <- gsub("P1", "PY", seurat@meta.data$Patient)
seurat@meta.data$Patient <- gsub("P2", "PX", seurat@meta.data$Patient)
seurat@meta.data$Patient <- gsub("P3", "PZ", seurat@meta.data$Patient)
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
seurat@assays$RNA@counts <- NULL
seurat@assays$RNA <- NULL
save(seurat, file="seurat2.rda")
save(seurat, file="seurat2.rda")
DimPlot(seurat, label = T) + NoLegend()
alluvialClonotypes(seurat, call = "gene", compare = "cluster", facet = "Patient")
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@meta.data$Patient <- gsub("P1", "PY", seurat@meta.data$Patient)
seurat@meta.data$Patient <- gsub("P2", "PX", seurat@meta.data$Patient)
seurat@meta.data$Patient <- gsub("P3", "PZ", seurat@meta.data$Patient)
seurat@meta.data <- seurat@meta.data[,-c(1,6)]
seurat@assays$RNA <- NULL
save(seurat, file="seurat2.rda")
View(seurat)
seurat <- get(load("/Users/nick/seurat.rda"))
x <- colnames(seurat@assays$integrated)
x1 <- gsub("P1", "PY", x)
x2 <- gsub("P2", "PX", x1)
x3 <- gsub("P3", "PZ", x2)
renamed.assay <- RenameCells(
object = seurat,
new.names = x3)
seurat <- renamed.assay
seurat@meta.data$Patient <- gsub("P1", "PY", seurat@meta.data$Patient)
seurat@meta.data$Patient <- gsub("P2", "PX", seurat@meta.data$Patient)
seurat@meta.data$Patient <- gsub("P3", "PZ", seurat@meta.data$Patient)
seurat@meta.data <- seurat@meta.data[,-c(1)]
seurat@assays$RNA <- NULL
save(seurat, file="seurat2.rda")
devtools::document()
data("contig_list") #the data built into scRepertoire
for (i in seq_along(contig_list)) {
contig_list[[i]] <- stripBarcode(contig_list[[i]], column = 1, connector = "_", num_connects = 3)
}
head(contig_list[[1]])
combined <- combineContigs(contig_list, samples = c("PY", "PY", "PX", "PX", "PZ","PZ"), ID = c("P", "T", "P", "T", "P", "T"), cells ="T-AB")
clonalOverlap(combined, call = "gene+nt", method = "morisita")
names(combined)
order(names(combined))
combined[order(unlist(combined),decreasing=TRUE)]
df <- combined
df <- df[order(unlist(df),decreasing=TRUE)]
df <- combined
df <- df[order(df),decreasing=TRUE)]
df <- df[order(df,decreasing=TRUE)]
df <- combined
df <- df[order(names(df))]
names(df)
devtools::document()
clonalOverlap(combined, call = "gene+nt", method = "morisita")
devtools::install()
devtools::install()
devtools::document()
scRepertoire::clonalOverlap(seurat, call = "nt")
scRepertoire::clonalOverlap(seurat, call = "nt")
devtools::document()
scRepertoire::clonalOverlap(seurat, call = "nt")
df <- seurat
if (class(df)[1] == "Seurat") {
meta <- data.frame(df@meta.data, df@active.ident)
colnames(meta)[length(meta)] <- "cluster"
unique <- stringr::str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
meta$barcodes <- rownames(meta)
df <- NULL
for (i in seq_along(unique)) {
subset <- subset(meta, meta[,"cluster"] == unique[i])
df[[i]] <- subset
}
names(df) <- unique
}
num_samples <- length(df[])
names_samples <- names(df)
coef_matrix <- data.frame(matrix(NA, num_samples, num_samples))
colnames(coef_matrix) <- names_samples
rownames(coef_matrix) <- names_samples
for (i in 1:num_samples){
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
df.i_unique <- df.i[!duplicated(df.i$barcode),]
for (j in 1:num_samples){
if (i >= j){
next
}
else {
df.j <- df[[j]]
df.j <- df.j[,c("barcode",call)]
df.j_unique <- df.j[!duplicated(df.j$barcode),]
overlap <- length(intersect(df.i_unique[,call], df.j_unique[,call]))
coef_matrix[i,j] <- overlap/min(length(df.i_unique[,call]), length(df.j_unique[,call]))
}
}
}
View(coef_matrix)
method = "overlap"
if (method == "overlap") {
for (i in 1:num_samples){
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
df.i_unique <- df.i[!duplicated(df.i$barcode),]
for (j in 1:num_samples){
if (i >= j){
next
}
else {
df.j <- df[[j]]
df.j <- df.j[,c("barcode",call)]
df.j_unique <- df.j[!duplicated(df.j$barcode),]
overlap <- length(intersect(df.i_unique[,call], df.j_unique[,call]))
coef_matrix[i,j] <- overlap/min(length(df.i_unique[,call]), length(df.j_unique[,call]))
}
}
}
}
num_samples <- length(df[])
names_samples <- names(df)
coef_matrix <- data.frame(matrix(NA, num_samples, num_samples))
View(coef_matrix)
colnames(coef_matrix) <- names_samples
rownames(coef_matrix) <- names_samples
i <- 1
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
View(df.i)
devtools::document()
scRepertoire::clonalOverlap(seurat, call = "nt")
df.i <- df[[i]]
df.i <- data.frame(table(df.i[,call]))
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
View(df.i)
df <- seurat
if (class(df)[1] == "Seurat") {
meta <- data.frame(df@meta.data, df@active.ident)
colnames(meta)[length(meta)] <- "cluster"
unique <- stringr::str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
meta$barcode <- rownames(meta)
df <- NULL
for (i in seq_along(unique)) {
subset <- subset(meta, meta[,"cluster"] == unique[i])
df[[i]] <- subset
}
names(df) <- unique
}
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
View(df.i)
call <- "CTaa"
df.i_unique <- df.i[!duplicated(df.i$barcode),]
for (j in 1:num_samples){
if (i >= j){
next
}
else {
df.j <- df[[j]]
df.j <- df.j[,c("barcode",call)]
df.j_unique <- df.j[!duplicated(df.j$barcode),]
overlap <- length(intersect(df.i_unique[,call], df.j_unique[,call]))
coef_matrix[i,j] <- overlap/min(length(df.i_unique[,call]), length(df.j_unique[,call]))
}
}
View(coef_matrix)
#' Examining the clonal overlap between samples
#'
#' @param df The product of CombineContig() or the seurat object after combineSeurat()
#' @param call How to call the clonotype - CDR3 gene, CDR3 nt or CDR3 aa, or CDR3+nucleotide
#' @param method The method to calculate the overlap, either the overlap coefficient or morisita index
#'
#' @export
clonalOverlap <- function(df,
call = c("gene", "nt", "aa", "gene+nt"),
method = c("overlap", "morisita")){
if (call == "gene") {
call <- "CTgene"
} else if(call == "nt") {
call <- "CTnt"
} else if (call == "aa") {
call <- "CTaa"
} else {
call <- "CTstrict"
}
if (class(df)[1] == "Seurat") {
meta <- data.frame(df@meta.data, df@active.ident)
colnames(meta)[length(meta)] <- "cluster"
unique <- stringr::str_sort(as.character(unique(meta$cluster)), numeric = TRUE)
meta$barcode <- rownames(meta)
df <- NULL
for (i in seq_along(unique)) {
subset <- subset(meta, meta[,"cluster"] == unique[i])
df[[i]] <- subset
}
names(df) <- unique
}
else if (class(df)[1] != "Seurat") {
df <- df[order(names(df))]
}
num_samples <- length(df[])
names_samples <- names(df)
coef_matrix <- data.frame(matrix(NA, num_samples, num_samples))
colnames(coef_matrix) <- names_samples
rownames(coef_matrix) <- names_samples
if (method == "overlap") {
for (i in 1:num_samples){
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
df.i_unique <- df.i[!duplicated(df.i$barcode),]
for (j in 1:num_samples){
if (i >= j){
next
}
else {
df.j <- df[[j]]
df.j <- df.j[,c("barcode",call)]
df.j_unique <- df.j[!duplicated(df.j$barcode),]
overlap <- length(intersect(df.i_unique[,call], df.j_unique[,call]))
coef_matrix[i,j] <- overlap/min(length(df.i_unique[,call]), length(df.j_unique[,call]))
}
}
}
}
else if (method == "morisita") {
for (i in 1:num_samples){
df.i <- df[[i]]
df.i <- data.frame(table(df.i[,call]))
colnames(df.i) <- c(call, 'Count')
df.i[,2] <- as.numeric(df.i[,2])
for (j in 1:num_samples){
if (i >= j){
next
}
else {
df.j <- df[[j]]
df.j <- data.frame(table(df.j[,call]))
colnames(df.j) <- c(call, 'Count')
df.j[,2] <- as.numeric(df.j[,2])
merged <- merge(df.i, df.j, by = call, all = T)
merged[is.na(merged)] <- 0
sum.df.i <- sum(df.i[,2])
sum.df.j <- sum(df.j[,2])
coef.i.j <- 2 * sum(merged[,2] * merged[,3] / sum.df.j) / sum.df.j/
((sum((df.i[,2] / sum.df.i)^2) + sum((df.j[,2] / sum.df.j)^2)))
coef_matrix[i,j] <- coef.i.j
}
}
}
}
coef_matrix$names <- rownames(coef_matrix)
coef_matrix <- suppressMessages(reshape2::melt(coef_matrix))
coef_matrix <- coef_matrix[,-1]
col <- colorblind_vector(7)
values <- stringr::str_sort(as.character(unique(coef_matrix$names)), numeric = TRUE)
values2 <- quiet(dput(values))
coef_matrix$variable <- factor(coef_matrix$variable, levels = values2)
coef_matrix$names <- factor(coef_matrix$names, levels = values2)
plot <- ggplot(coef_matrix, aes(x=names, y=variable, fill=value)) +
geom_tile() +
geom_text(aes(label = round(value, digits = 3))) +
scale_fill_gradient2(high = col[1], mid = col[4], midpoint = ((range(na.omit(coef_matrix$value)))/2)[2], low=col[7], na.value = "white") +
labs(fill = method) +
theme_classic() +
theme(axis.title = element_blank())
suppressWarnings(print(plot))
}
scRepertoire::clonalOverlap(seurat, call = "nt")
scRepertoire::clonalOverlap(seurat, call = "nt", method = "overlap")
num_samples <- length(df[])
names_samples <- names(df)
coef_matrix <- data.frame(matrix(NA, num_samples, num_samples))
colnames(coef_matrix) <- names_samples
rownames(coef_matrix) <- names_samples
if (method == "overlap") {
for (i in 1:num_samples){
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
df.i_unique <- df.i[!duplicated(df.i$barcode),]
for (j in 1:num_samples){
if (i >= j){
next
}
else {
df.j <- df[[j]]
df.j <- df.j[,c("barcode",call)]
df.j_unique <- df.j[!duplicated(df.j$barcode),]
overlap <- length(intersect(df.i_unique[,call], df.j_unique[,call]))
coef_matrix[i,j] <- overlap/min(length(df.i_unique[,call]), length(df.j_unique[,call]))
}
}
}
}
df.i <- df[[i]]
df.i <- df.i[,c("barcode",call)]
View(df1)
head(seurat@meta.data)
seurat <- combineSeurat(combined, seurat, call="gene", groupBy = "sample")
DimPlot(seurat, group.by = "cloneType") +
scale_color_manual(values = c(rev(colorblind_vector(5))), na.value="grey")
scRepertoire::clonalOverlap(seurat, call = "nt", method = "overlap")
View(seurat)
