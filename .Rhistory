df[[x]]
df[[x]][df[[x]] == ""]
checkContigs <- function(df) {
df <- lapply(seq_len(len(df)), function(x) {
df[[x]] <- if(is(df[[x]])[1] != "data.frame") as.data.frame(df[[x]]) else df[[x]]
df[[x]][df[[x]] == ""] <- NA
})
}
df <- lapply(seq_len(len(df)), function(x) {
df[[x]] <- if(is(df[[x]])[1] != "data.frame") as.data.frame(df[[x]]) else df[[x]]
df[[x]][df[[x]] == ""] <- NA
})
df <- lapply(seq_len(length(df)), function(x) {
df[[x]] <- if(is(df[[x]])[1] != "data.frame") as.data.frame(df[[x]]) else df[[x]]
df[[x]][df[[x]] == ""] <- NA
})
View(df)
df <- contig_list
df[[x]] == ""
df[[x]][df[[x]] == ""] <- NA
View(df)
df <- lapply(seq_len(length(df)), function(x) {
df[[x]] <- if(is(df[[x]])[1] != "data.frame") as.data.frame(df[[x]]) else df[[x]]
df[[x]][df[[x]] == ""] <- NA
})
df <- contig_list
df <- lapply(seq_len(length(df)), function(x) {
df[[x]] <- if(is(df[[x]])[1] != "data.frame") as.data.frame(df[[x]]) else df[[x]]
df[[x]][df[[x]] == ""] <- NA
df[[x]]
})
setwd("~/Documents/GitHub/scRepertoire")
devtools::document()
combined <- combineTCR(contig_list, rep(c("PX", "PY", "PZ"), each=2),
rep(c("P", "T"), 3), cells ="T-AB")
#Getting a sample of a Seurat object
screp_example <- get(data("screp_example"))
sce <- suppressMessages(Seurat::UpdateSeuratObject(screp_example))
#Using combineExpresion()
sce <- combineExpression(combined, sce)
#Using clonalNetwork()
clonalNetwork(sce, reduction = "umap",
identity = "cluster",
filter.identity = "C1)
clonalNetwork(sce, reduction = "umap",
identity = "cluster",
filter.identity = "C1)
devtools::check()
combined <- combineTCR(contig_list,
samples = c("PY", "PY", "PX", "PX", "PZ","PZ"),
ID = c("P", "T", "P", "T", "P", "T"), cells ="T-AB")
seurat <- get(load("~/seurat2.rda"))
seurat <- get(load("~/seurat2.rda"))
DimPlot(seurat, label = T) + NoLegend()
seurat <- combineExpression(combined, seurat,
cloneCall="gene", group.by = "sample", proportion = FALSE,
cloneTypes=c(Single=1, Small=5, Medium=20, Large=100, Hyperexpanded=500))
seurat <- clusterTCR(seurat,
chain = "TRB",
group.by = "Patient",
sequence = "aa",
threshold = 0.85)
head(seurat[[]])
sc <- seurat
chain = "TRB"
threshold = 0.85
group.by = "Patient"
sequence = "aa"
list.input.return <- function(df, split.by) {
if (inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
if(is.null(split.by)){
split.by <- "cluster"
}
df <- expression2List(df, split.by)
}
return(df)
}
dat <- list.input.return(df, group.by)
if (inherits(x=df, what ="Seurat") |
inherits(x=df, what ="SummarizedExperiment")) {
for(y in seq_along(dat)) {
dat[[y]]$cdr3_aa1 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_aa2 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,2]
dat[[y]]$cdr3_nt1 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_nt2 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,2]
}
}
dat <- checkList(dat)
if(chain %in% c("TRA", "TRG")) {
ref <- 1
} else if(chain %in% c("TRB", "TRD")) {
ref <- 2
}
ref2 <- paste0("cdr3_", sequence, ref)
bound <- bind_rows(dat)
#Should make it work as either grouped or non-grouped
if (!is.null(group.by)) {
bound <- split(bound, bound[,group.by])
list.length <- length(bound)
} else {
bound <- list(bound)
list.length <- 1
}
bound <- bind_rows(dat)
bound <- split(bound, bound[,group.by])
bound
dat <- list.input.return(df, group.by)
rm(df)
df <- seurat
dat <- list.input.return(df, group.by)
if (inherits(x=df, what ="Seurat") |
inherits(x=df, what ="SummarizedExperiment")) {
for(y in seq_along(dat)) {
dat[[y]]$cdr3_aa1 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_aa2 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,2]
dat[[y]]$cdr3_nt1 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_nt2 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,2]
}
}
dat <- checkList(dat)
if(chain %in% c("TRA", "TRG")) {
ref <- 1
} else if(chain %in% c("TRB", "TRD")) {
ref <- 2
}
ref2 <- paste0("cdr3_", sequence, ref)
bound <- bind_rows(dat)
#Should make it work as either grouped or non-grouped
if (!is.null(group.by)) {
bound <- split(bound, bound[,group.by])
list.length <- length(bound)
} else {
bound <- list(bound)
list.length <- 1
}
for (x in seq_along(bound)) {
dictionary <- na.omit(unique(bound[[x]][,ref2]))
dictionary <- str_split(dictionary, ";", simplify = TRUE)[,1]
length <- nchar(dictionary)
dist <- stringdistmatrix(dictionary, method = "lv")
edge.list <- NULL
for (j in seq_len(length(dictionary))) {
row <- SliceExtract_dist(dist,j)
norm.row <- row
for (k in seq_len(length(norm.row))) {
norm.row[k] <- 1- (norm.row[k]/mean(c(length[j],length[k])))
}
neighbor <- which(norm.row >= threshold)
knn.norm = data.frame("from" = j,
"to" = neighbor)
edge.list <- rbind(edge.list, knn.norm)
}
edge.list <- unique(edge.list)
g <- graph_from_data_frame(edge.list)
components <- components(g, mode = c("weak"))
out <- data.frame("cluster" = components$membership,
"filtered" = names(components$membership))
filter <- which(table(out$cluster) > 1)
out <- subset(out, cluster %in% filter)
if(nrow(out) > 1) {
if (list.length == 1) {
out$cluster <- paste0(chain, ":LD", ".", out$cluster)
} else {
out$cluster <- paste0(names(bound)[x], ".", chain, ":LD", ".", out$cluster)
}
out$filtered <- dictionary[as.numeric(out$filtered)]
}
uni_IG <- as.data.frame(unique(dictionary[dictionary %!in% out$filtered]))
colnames(uni_IG) <- "filtered"
if (nrow(uni_IG) > 0) {
if (list.length == 1) {
uni_IG$cluster <- paste0(chain, ".", seq_len(nrow(uni_IG)))
} else {
uni_IG$cluster <- paste0(names(bound)[x], ".", chain, ".", seq_len(nrow(uni_IG)))
}
}
output <- rbind.data.frame(out, uni_IG)
colname <- paste0(chain, "_cluster")
colnames(output) <- c(ref2,colname)
output.list[[x]] <- output
}
output.list <- list()
for (x in seq_along(bound)) {
dictionary <- na.omit(unique(bound[[x]][,ref2]))
dictionary <- str_split(dictionary, ";", simplify = TRUE)[,1]
length <- nchar(dictionary)
dist <- stringdistmatrix(dictionary, method = "lv")
edge.list <- NULL
for (j in seq_len(length(dictionary))) {
row <- SliceExtract_dist(dist,j)
norm.row <- row
for (k in seq_len(length(norm.row))) {
norm.row[k] <- 1- (norm.row[k]/mean(c(length[j],length[k])))
}
neighbor <- which(norm.row >= threshold)
knn.norm = data.frame("from" = j,
"to" = neighbor)
edge.list <- rbind(edge.list, knn.norm)
}
edge.list <- unique(edge.list)
g <- graph_from_data_frame(edge.list)
components <- components(g, mode = c("weak"))
out <- data.frame("cluster" = components$membership,
"filtered" = names(components$membership))
filter <- which(table(out$cluster) > 1)
out <- subset(out, cluster %in% filter)
if(nrow(out) > 1) {
if (list.length == 1) {
out$cluster <- paste0(chain, ":LD", ".", out$cluster)
} else {
out$cluster <- paste0(names(bound)[x], ".", chain, ":LD", ".", out$cluster)
}
out$filtered <- dictionary[as.numeric(out$filtered)]
}
uni_IG <- as.data.frame(unique(dictionary[dictionary %!in% out$filtered]))
colnames(uni_IG) <- "filtered"
if (nrow(uni_IG) > 0) {
if (list.length == 1) {
uni_IG$cluster <- paste0(chain, ".", seq_len(nrow(uni_IG)))
} else {
uni_IG$cluster <- paste0(names(bound)[x], ".", chain, ".", seq_len(nrow(uni_IG)))
}
}
output <- rbind.data.frame(out, uni_IG)
colname <- paste0(chain, "_cluster")
colnames(output) <- c(ref2,colname)
output.list[[x]] <- output
}
for (i in seq_along(bound)) {
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,1] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
bound[[i]] <- tmp
}
PreMeta <- bind_rows(bound)
View(PreMeta)
x <- colnames(PreMeta)[ncol(PreMeta)]
PreMeta <- as.data.frame(PreMeta[,x], row.names = PreMeta$barcode)
colnames(PreMeta) <- x
output2
i <- 1
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,1] %in% tmp[,ref2],]
output[,1]
tmp[,ref2]
View(output)
output2 <- output[output[,2] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
bound[[i]] <- tmp
for (i in seq_along(bound)) {
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,2] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
bound[[i]] <- tmp
}
PreMeta <- bind_rows(bound)
x <- colnames(PreMeta)[ncol(PreMeta)]
PreMeta <- as.data.frame(PreMeta[,x], row.names = PreMeta$barcode)
colnames(PreMeta) <- x
View(PreMeta)
PreMeta <- bind_rows(bound)
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,2] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
View(tmp)
View(output)
View(output2)
View(bound)
i <- 1
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,2] %in% tmp[,ref2],]
View(output2)
tmp <-  unique(suppressMessages(join(tmp,  output2)))
View(tmp)
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,2] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
tmp
out <- subset(out, cluster %in% filter)
for (x in seq_along(bound)) {
dictionary <- na.omit(unique(bound[[x]][,ref2]))
dictionary <- str_split(dictionary, ";", simplify = TRUE)[,1]
length <- nchar(dictionary)
dist <- stringdistmatrix(dictionary, method = "lv")
edge.list <- NULL
for (j in seq_len(length(dictionary))) {
row <- SliceExtract_dist(dist,j)
norm.row <- row
for (k in seq_len(length(norm.row))) {
norm.row[k] <- 1- (norm.row[k]/mean(c(length[j],length[k])))
}
neighbor <- which(norm.row >= threshold)
knn.norm = data.frame("from" = j,
"to" = neighbor)
edge.list <- rbind(edge.list, knn.norm)
}
edge.list <- unique(edge.list)
g <- graph_from_data_frame(edge.list)
components <- components(g, mode = c("weak"))
out <- data.frame("cluster" = components$membership,
"filtered" = names(components$membership))
filter <- which(table(out$cluster) > 1)
out <- subset(out, cluster %in% filter)
if(nrow(out) > 1) {
if (list.length == 1) {
out$cluster <- paste0(chain, ":LD", ".", out$cluster)
} else {
out$cluster <- paste0(names(bound)[x], ".", chain, ":LD", ".", out$cluster)
}
out$filtered <- dictionary[as.numeric(out$filtered)]
}
uni_IG <- as.data.frame(unique(dictionary[dictionary %!in% out$filtered]))
colnames(uni_IG) <- "filtered"
if (nrow(uni_IG) > 0) {
if (list.length == 1) {
uni_IG$cluster <- paste0(chain, ".", seq_len(nrow(uni_IG)))
} else {
uni_IG$cluster <- paste0(names(bound)[x], ".", chain, ".", seq_len(nrow(uni_IG)))
}
}
output <- rbind.data.frame(out, uni_IG)
colname <- paste0(chain, "_cluster")
colnames(output) <- c(colname,ref2)
output.list[[x]] <- output
}
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,2] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
View(tmp)
View(tmp)
tmp <- bound[[i]]
colnames(tmp)
output.list <- list()
dat <- list.input.return(df, group.by)
if (inherits(x=df, what ="Seurat") |
inherits(x=df, what ="SummarizedExperiment")) {
for(y in seq_along(dat)) {
dat[[y]]$cdr3_aa1 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_aa2 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,2]
dat[[y]]$cdr3_nt1 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_nt2 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,2]
}
}
dat <- checkList(dat)
if(chain %in% c("TRA", "TRG")) {
ref <- 1
} else if(chain %in% c("TRB", "TRD")) {
ref <- 2
}
ref2 <- paste0("cdr3_", sequence, ref)
bound <- bind_rows(dat)
#Should make it work as either grouped or non-grouped
if (!is.null(group.by)) {
bound <- split(bound, bound[,group.by])
list.length <- length(bound)
} else {
bound <- list(bound)
list.length <- 1
}
tmp <- bound[[i]]
View(tmp)
clusterTCR <- function(df,
chain = NULL,
sequence = NULL,
threshold = 0.85,
group.by = NULL) {
output.list <- list()
dat <- list.input.return(df, group.by)
if (inherits(x=df, what ="Seurat") |
inherits(x=df, what ="SummarizedExperiment")) {
for(y in seq_along(dat)) {
dat[[y]]$cdr3_aa1 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_aa2 <- str_split(dat[[y]]$CTaa, "_", simplify = TRUE)[,2]
dat[[y]]$cdr3_nt1 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,1]
dat[[y]]$cdr3_nt2 <- str_split(dat[[y]]$CTnt, "_", simplify = TRUE)[,2]
}
}
dat <- checkList(dat)
if(chain %in% c("TRA", "TRG")) {
ref <- 1
} else if(chain %in% c("TRB", "TRD")) {
ref <- 2
}
ref2 <- paste0("cdr3_", sequence, ref)
bound <- bind_rows(dat)
#Should make it work as either grouped or non-grouped
if (!is.null(group.by)) {
bound <- split(bound, bound[,group.by])
list.length <- length(bound)
} else {
bound <- list(bound)
list.length <- 1
}
for (x in seq_along(bound)) {
dictionary <- na.omit(unique(bound[[x]][,ref2]))
dictionary <- str_split(dictionary, ";", simplify = TRUE)[,1]
length <- nchar(dictionary)
dist <- stringdistmatrix(dictionary, method = "lv")
edge.list <- NULL
for (j in seq_len(length(dictionary))) {
row <- SliceExtract_dist(dist,j)
norm.row <- row
for (k in seq_len(length(norm.row))) {
norm.row[k] <- 1- (norm.row[k]/mean(c(length[j],length[k])))
}
neighbor <- which(norm.row >= threshold)
knn.norm = data.frame("from" = j,
"to" = neighbor)
edge.list <- rbind(edge.list, knn.norm)
}
edge.list <- unique(edge.list)
g <- graph_from_data_frame(edge.list)
components <- components(g, mode = c("weak"))
out <- data.frame("cluster" = components$membership,
"filtered" = names(components$membership))
filter <- which(table(out$cluster) > 1)
out <- subset(out, cluster %in% filter)
if(nrow(out) > 1) {
if (list.length == 1) {
out$cluster <- paste0(chain, ":LD", ".", out$cluster)
} else {
out$cluster <- paste0(names(bound)[x], ".", chain, ":LD", ".", out$cluster)
}
out$filtered <- dictionary[as.numeric(out$filtered)]
}
uni_IG <- as.data.frame(unique(dictionary[dictionary %!in% out$filtered]))
colnames(uni_IG) <- "filtered"
if (nrow(uni_IG) > 0) {
if (list.length == 1) {
uni_IG$cluster <- paste0(chain, ".", seq_len(nrow(uni_IG)))
} else {
uni_IG$cluster <- paste0(names(bound)[x], ".", chain, ".", seq_len(nrow(uni_IG)))
}
}
output <- rbind.data.frame(out, uni_IG)
colname <- paste0(chain, "_cluster")
colnames(output) <- c(colname,ref2)
output.list[[x]] <- output
}
for (i in seq_along(bound)) {
tmp <- bound[[i]]
output <- bind_rows(output.list)
tmp[,ref2] <- str_split(tmp[,ref2], ";", simplify = TRUE)[,1]
output2 <- output[output[,2] %in% tmp[,ref2],]
tmp <-  unique(suppressMessages(join(tmp,  output2)))
bound[[i]] <- tmp
}
if(inherits(x=df, what ="Seurat") | inherits(x=df, what ="SummarizedExperiment")) {
PreMeta <- bind_rows(bound)
x <- colnames(PreMeta)[ncol(PreMeta)]
PreMeta <- as.data.frame(PreMeta[,x], row.names = PreMeta$barcode)
colnames(PreMeta) <- x
if (inherits(x=df, what ="Seurat")) {
col.name <- names(PreMeta) %||% colnames(PreMeta)
df[[col.name]] <- PreMeta
} else {
rownames <- rownames(colData(df))
colData(df) <- cbind(colData(df), PreMeta[rownames,])[, union(colnames(colData(df)),  colnames(PreMeta))]
rownames(colData(df)) <- rownames
}
} else {
df <- bound
}
return(df)
}
seurat <- clusterTCR(seurat,
chain = "TRB",
group.by = "Patient",
sequence = "aa",
threshold = 0.85)
DimPlot(se
DimPlot(seurat, group.by = "TRB_cluster") +
DimPlot(seurat, group.by = "TRB_cluster") +
NoLegend()
head(seurat[[]])
seurat@meta.data <- seurat@meta.data[,-which(colnames(seurat@meta.data) == "TRB_cluster")]
seurat <- clusterTCR(seurat,
chain = "TRB",
group.by = "Patient",
sequence = "aa",
threshold = 0.85)
DimPlot(seurat, group.by = "TRB_cluster") +
NoLegend()
DimPlot(seurat, group.by = "TRB_cluster") +
scale_fill_manual(values = colorblind_vector(length(unique(seurat[["TRB_cluster"]])))) +
NoLegend()
DimPlot(seurat, group.by = "TRB_cluster") +
scale_color_manual(values = colorblind_vector(length(unique(seurat[["TRB_cluster"]])))) +
NoLegend()
length(unique(seurat[["TRB_cluster"]]))
unique(seurat[["TRB_cluster"]]
)
DimPlot(seurat, group.by = "TRB_cluster") +
scale_color_manual(values = colorblind_vector(length(unique(seurat@meta.data[,"TRB_cluster"])))) +
NoLegend()
devtools::install()
table <- read.csv("./tables/file.inventory.csv")
table <- table[,c(1,8)]
